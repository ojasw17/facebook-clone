{"ast":null,"code":"'use strict';\n\nconst MiniPass = require('minipass');\n\nconst Pax = require('./pax.js');\n\nconst Header = require('./header.js');\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst normPath = require('./normalize-windows-path.js');\n\nconst stripSlash = require('./strip-trailing-slashes.js');\n\nconst prefixPath = (path, prefix) => {\n  if (!prefix) return normPath(path);\n  path = normPath(path).replace(/^\\.(\\/|$)/, '');\n  return stripSlash(prefix) + '/' + path;\n};\n\nconst maxReadSize = 16 * 1024 * 1024;\nconst PROCESS = Symbol('process');\nconst FILE = Symbol('file');\nconst DIRECTORY = Symbol('directory');\nconst SYMLINK = Symbol('symlink');\nconst HARDLINK = Symbol('hardlink');\nconst HEADER = Symbol('header');\nconst READ = Symbol('read');\nconst LSTAT = Symbol('lstat');\nconst ONLSTAT = Symbol('onlstat');\nconst ONREAD = Symbol('onread');\nconst ONREADLINK = Symbol('onreadlink');\nconst OPENFILE = Symbol('openfile');\nconst ONOPENFILE = Symbol('onopenfile');\nconst CLOSE = Symbol('close');\nconst MODE = Symbol('mode');\nconst AWAITDRAIN = Symbol('awaitDrain');\nconst ONDRAIN = Symbol('ondrain');\nconst PREFIX = Symbol('prefix');\nconst HAD_ERROR = Symbol('hadError');\n\nconst warner = require('./warn-mixin.js');\n\nconst winchars = require('./winchars.js');\n\nconst stripAbsolutePath = require('./strip-absolute-path.js');\n\nconst modeFix = require('./mode-fix.js');\n\nconst WriteEntry = warner(class WriteEntry extends MiniPass {\n  constructor(p, opt) {\n    opt = opt || {};\n    super(opt);\n    if (typeof p !== 'string') throw new TypeError('path is required');\n    this.path = normPath(p); // suppress atime, ctime, uid, gid, uname, gname\n\n    this.portable = !!opt.portable; // until node has builtin pwnam functions, this'll have to do\n\n    this.myuid = process.getuid && process.getuid() || 0;\n    this.myuser = process.env.USER || '';\n    this.maxReadSize = opt.maxReadSize || maxReadSize;\n    this.linkCache = opt.linkCache || new Map();\n    this.statCache = opt.statCache || new Map();\n    this.preservePaths = !!opt.preservePaths;\n    this.cwd = normPath(opt.cwd || process.cwd());\n    this.strict = !!opt.strict;\n    this.noPax = !!opt.noPax;\n    this.noMtime = !!opt.noMtime;\n    this.mtime = opt.mtime || null;\n    this.prefix = opt.prefix ? normPath(opt.prefix) : null;\n    this.fd = null;\n    this.blockLen = null;\n    this.blockRemain = null;\n    this.buf = null;\n    this.offset = null;\n    this.length = null;\n    this.pos = null;\n    this.remain = null;\n    if (typeof opt.onwarn === 'function') this.on('warn', opt.onwarn);\n    let pathWarn = false;\n\n    if (!this.preservePaths) {\n      const [root, stripped] = stripAbsolutePath(this.path);\n\n      if (root) {\n        this.path = stripped;\n        pathWarn = root;\n      }\n    }\n\n    this.win32 = !!opt.win32 || process.platform === 'win32';\n\n    if (this.win32) {\n      // force the \\ to / normalization, since we might not *actually*\n      // be on windows, but want \\ to be considered a path separator.\n      this.path = winchars.decode(this.path.replace(/\\\\/g, '/'));\n      p = p.replace(/\\\\/g, '/');\n    }\n\n    this.absolute = normPath(opt.absolute || path.resolve(this.cwd, p));\n    if (this.path === '') this.path = './';\n\n    if (pathWarn) {\n      this.warn('TAR_ENTRY_INFO', `stripping ${pathWarn} from absolute path`, {\n        entry: this,\n        path: pathWarn + this.path\n      });\n    }\n\n    if (this.statCache.has(this.absolute)) this[ONLSTAT](this.statCache.get(this.absolute));else this[LSTAT]();\n  }\n\n  emit(ev) {\n    if (ev === 'error') this[HAD_ERROR] = true;\n\n    for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      data[_key - 1] = arguments[_key];\n    }\n\n    return super.emit(ev, ...data);\n  }\n\n  [LSTAT]() {\n    fs.lstat(this.absolute, (er, stat) => {\n      if (er) return this.emit('error', er);\n      this[ONLSTAT](stat);\n    });\n  }\n\n  [ONLSTAT](stat) {\n    this.statCache.set(this.absolute, stat);\n    this.stat = stat;\n    if (!stat.isFile()) stat.size = 0;\n    this.type = getType(stat);\n    this.emit('stat', stat);\n    this[PROCESS]();\n  }\n\n  [PROCESS]() {\n    switch (this.type) {\n      case 'File':\n        return this[FILE]();\n\n      case 'Directory':\n        return this[DIRECTORY]();\n\n      case 'SymbolicLink':\n        return this[SYMLINK]();\n      // unsupported types are ignored.\n\n      default:\n        return this.end();\n    }\n  }\n\n  [MODE](mode) {\n    return modeFix(mode, this.type === 'Directory', this.portable);\n  }\n\n  [PREFIX](path) {\n    return prefixPath(path, this.prefix);\n  }\n\n  [HEADER]() {\n    if (this.type === 'Directory' && this.portable) this.noMtime = true;\n    this.header = new Header({\n      path: this[PREFIX](this.path),\n      // only apply the prefix to hard links.\n      linkpath: this.type === 'Link' ? this[PREFIX](this.linkpath) : this.linkpath,\n      // only the permissions and setuid/setgid/sticky bitflags\n      // not the higher-order bits that specify file type\n      mode: this[MODE](this.stat.mode),\n      uid: this.portable ? null : this.stat.uid,\n      gid: this.portable ? null : this.stat.gid,\n      size: this.stat.size,\n      mtime: this.noMtime ? null : this.mtime || this.stat.mtime,\n      type: this.type,\n      uname: this.portable ? null : this.stat.uid === this.myuid ? this.myuser : '',\n      atime: this.portable ? null : this.stat.atime,\n      ctime: this.portable ? null : this.stat.ctime\n    });\n\n    if (this.header.encode() && !this.noPax) {\n      super.write(new Pax({\n        atime: this.portable ? null : this.header.atime,\n        ctime: this.portable ? null : this.header.ctime,\n        gid: this.portable ? null : this.header.gid,\n        mtime: this.noMtime ? null : this.mtime || this.header.mtime,\n        path: this[PREFIX](this.path),\n        linkpath: this.type === 'Link' ? this[PREFIX](this.linkpath) : this.linkpath,\n        size: this.header.size,\n        uid: this.portable ? null : this.header.uid,\n        uname: this.portable ? null : this.header.uname,\n        dev: this.portable ? null : this.stat.dev,\n        ino: this.portable ? null : this.stat.ino,\n        nlink: this.portable ? null : this.stat.nlink\n      }).encode());\n    }\n\n    super.write(this.header.block);\n  }\n\n  [DIRECTORY]() {\n    if (this.path.substr(-1) !== '/') this.path += '/';\n    this.stat.size = 0;\n    this[HEADER]();\n    this.end();\n  }\n\n  [SYMLINK]() {\n    fs.readlink(this.absolute, (er, linkpath) => {\n      if (er) return this.emit('error', er);\n      this[ONREADLINK](linkpath);\n    });\n  }\n\n  [ONREADLINK](linkpath) {\n    this.linkpath = normPath(linkpath);\n    this[HEADER]();\n    this.end();\n  }\n\n  [HARDLINK](linkpath) {\n    this.type = 'Link';\n    this.linkpath = normPath(path.relative(this.cwd, linkpath));\n    this.stat.size = 0;\n    this[HEADER]();\n    this.end();\n  }\n\n  [FILE]() {\n    if (this.stat.nlink > 1) {\n      const linkKey = this.stat.dev + ':' + this.stat.ino;\n\n      if (this.linkCache.has(linkKey)) {\n        const linkpath = this.linkCache.get(linkKey);\n        if (linkpath.indexOf(this.cwd) === 0) return this[HARDLINK](linkpath);\n      }\n\n      this.linkCache.set(linkKey, this.absolute);\n    }\n\n    this[HEADER]();\n    if (this.stat.size === 0) return this.end();\n    this[OPENFILE]();\n  }\n\n  [OPENFILE]() {\n    fs.open(this.absolute, 'r', (er, fd) => {\n      if (er) return this.emit('error', er);\n      this[ONOPENFILE](fd);\n    });\n  }\n\n  [ONOPENFILE](fd) {\n    this.fd = fd;\n    if (this[HAD_ERROR]) return this[CLOSE]();\n    this.blockLen = 512 * Math.ceil(this.stat.size / 512);\n    this.blockRemain = this.blockLen;\n    const bufLen = Math.min(this.blockLen, this.maxReadSize);\n    this.buf = Buffer.allocUnsafe(bufLen);\n    this.offset = 0;\n    this.pos = 0;\n    this.remain = this.stat.size;\n    this.length = this.buf.length;\n    this[READ]();\n  }\n\n  [READ]() {\n    const {\n      fd,\n      buf,\n      offset,\n      length,\n      pos\n    } = this;\n    fs.read(fd, buf, offset, length, pos, (er, bytesRead) => {\n      if (er) {\n        // ignoring the error from close(2) is a bad practice, but at\n        // this point we already have an error, don't need another one\n        return this[CLOSE](() => this.emit('error', er));\n      }\n\n      this[ONREAD](bytesRead);\n    });\n  }\n\n  [CLOSE](cb) {\n    fs.close(this.fd, cb);\n  }\n\n  [ONREAD](bytesRead) {\n    if (bytesRead <= 0 && this.remain > 0) {\n      const er = new Error('encountered unexpected EOF');\n      er.path = this.absolute;\n      er.syscall = 'read';\n      er.code = 'EOF';\n      return this[CLOSE](() => this.emit('error', er));\n    }\n\n    if (bytesRead > this.remain) {\n      const er = new Error('did not encounter expected EOF');\n      er.path = this.absolute;\n      er.syscall = 'read';\n      er.code = 'EOF';\n      return this[CLOSE](() => this.emit('error', er));\n    } // null out the rest of the buffer, if we could fit the block padding\n    // at the end of this loop, we've incremented bytesRead and this.remain\n    // to be incremented up to the blockRemain level, as if we had expected\n    // to get a null-padded file, and read it until the end.  then we will\n    // decrement both remain and blockRemain by bytesRead, and know that we\n    // reached the expected EOF, without any null buffer to append.\n\n\n    if (bytesRead === this.remain) {\n      for (let i = bytesRead; i < this.length && bytesRead < this.blockRemain; i++) {\n        this.buf[i + this.offset] = 0;\n        bytesRead++;\n        this.remain++;\n      }\n    }\n\n    const writeBuf = this.offset === 0 && bytesRead === this.buf.length ? this.buf : this.buf.slice(this.offset, this.offset + bytesRead);\n    const flushed = this.write(writeBuf);\n    if (!flushed) this[AWAITDRAIN](() => this[ONDRAIN]());else this[ONDRAIN]();\n  }\n\n  [AWAITDRAIN](cb) {\n    this.once('drain', cb);\n  }\n\n  write(writeBuf) {\n    if (this.blockRemain < writeBuf.length) {\n      const er = new Error('writing more data than expected');\n      er.path = this.absolute;\n      return this.emit('error', er);\n    }\n\n    this.remain -= writeBuf.length;\n    this.blockRemain -= writeBuf.length;\n    this.pos += writeBuf.length;\n    this.offset += writeBuf.length;\n    return super.write(writeBuf);\n  }\n\n  [ONDRAIN]() {\n    if (!this.remain) {\n      if (this.blockRemain) super.write(Buffer.alloc(this.blockRemain));\n      return this[CLOSE](er => er ? this.emit('error', er) : this.end());\n    }\n\n    if (this.offset >= this.length) {\n      // if we only have a smaller bit left to read, alloc a smaller buffer\n      // otherwise, keep it the same length it was before.\n      this.buf = Buffer.allocUnsafe(Math.min(this.blockRemain, this.buf.length));\n      this.offset = 0;\n    }\n\n    this.length = this.buf.length - this.offset;\n    this[READ]();\n  }\n\n});\n\nclass WriteEntrySync extends WriteEntry {\n  [LSTAT]() {\n    this[ONLSTAT](fs.lstatSync(this.absolute));\n  }\n\n  [SYMLINK]() {\n    this[ONREADLINK](fs.readlinkSync(this.absolute));\n  }\n\n  [OPENFILE]() {\n    this[ONOPENFILE](fs.openSync(this.absolute, 'r'));\n  }\n\n  [READ]() {\n    let threw = true;\n\n    try {\n      const {\n        fd,\n        buf,\n        offset,\n        length,\n        pos\n      } = this;\n      const bytesRead = fs.readSync(fd, buf, offset, length, pos);\n      this[ONREAD](bytesRead);\n      threw = false;\n    } finally {\n      // ignoring the error from close(2) is a bad practice, but at\n      // this point we already have an error, don't need another one\n      if (threw) {\n        try {\n          this[CLOSE](() => {});\n        } catch (er) {}\n      }\n    }\n  }\n\n  [AWAITDRAIN](cb) {\n    cb();\n  }\n\n  [CLOSE](cb) {\n    fs.closeSync(this.fd);\n    cb();\n  }\n\n}\n\nconst WriteEntryTar = warner(class WriteEntryTar extends MiniPass {\n  constructor(readEntry, opt) {\n    opt = opt || {};\n    super(opt);\n    this.preservePaths = !!opt.preservePaths;\n    this.portable = !!opt.portable;\n    this.strict = !!opt.strict;\n    this.noPax = !!opt.noPax;\n    this.noMtime = !!opt.noMtime;\n    this.readEntry = readEntry;\n    this.type = readEntry.type;\n    if (this.type === 'Directory' && this.portable) this.noMtime = true;\n    this.prefix = opt.prefix || null;\n    this.path = normPath(readEntry.path);\n    this.mode = this[MODE](readEntry.mode);\n    this.uid = this.portable ? null : readEntry.uid;\n    this.gid = this.portable ? null : readEntry.gid;\n    this.uname = this.portable ? null : readEntry.uname;\n    this.gname = this.portable ? null : readEntry.gname;\n    this.size = readEntry.size;\n    this.mtime = this.noMtime ? null : opt.mtime || readEntry.mtime;\n    this.atime = this.portable ? null : readEntry.atime;\n    this.ctime = this.portable ? null : readEntry.ctime;\n    this.linkpath = normPath(readEntry.linkpath);\n    if (typeof opt.onwarn === 'function') this.on('warn', opt.onwarn);\n    let pathWarn = false;\n\n    if (!this.preservePaths) {\n      const [root, stripped] = stripAbsolutePath(this.path);\n\n      if (root) {\n        this.path = stripped;\n        pathWarn = root;\n      }\n    }\n\n    this.remain = readEntry.size;\n    this.blockRemain = readEntry.startBlockSize;\n    this.header = new Header({\n      path: this[PREFIX](this.path),\n      linkpath: this.type === 'Link' ? this[PREFIX](this.linkpath) : this.linkpath,\n      // only the permissions and setuid/setgid/sticky bitflags\n      // not the higher-order bits that specify file type\n      mode: this.mode,\n      uid: this.portable ? null : this.uid,\n      gid: this.portable ? null : this.gid,\n      size: this.size,\n      mtime: this.noMtime ? null : this.mtime,\n      type: this.type,\n      uname: this.portable ? null : this.uname,\n      atime: this.portable ? null : this.atime,\n      ctime: this.portable ? null : this.ctime\n    });\n\n    if (pathWarn) {\n      this.warn('TAR_ENTRY_INFO', `stripping ${pathWarn} from absolute path`, {\n        entry: this,\n        path: pathWarn + this.path\n      });\n    }\n\n    if (this.header.encode() && !this.noPax) {\n      super.write(new Pax({\n        atime: this.portable ? null : this.atime,\n        ctime: this.portable ? null : this.ctime,\n        gid: this.portable ? null : this.gid,\n        mtime: this.noMtime ? null : this.mtime,\n        path: this[PREFIX](this.path),\n        linkpath: this.type === 'Link' ? this[PREFIX](this.linkpath) : this.linkpath,\n        size: this.size,\n        uid: this.portable ? null : this.uid,\n        uname: this.portable ? null : this.uname,\n        dev: this.portable ? null : this.readEntry.dev,\n        ino: this.portable ? null : this.readEntry.ino,\n        nlink: this.portable ? null : this.readEntry.nlink\n      }).encode());\n    }\n\n    super.write(this.header.block);\n    readEntry.pipe(this);\n  }\n\n  [PREFIX](path) {\n    return prefixPath(path, this.prefix);\n  }\n\n  [MODE](mode) {\n    return modeFix(mode, this.type === 'Directory', this.portable);\n  }\n\n  write(data) {\n    const writeLen = data.length;\n    if (writeLen > this.blockRemain) throw new Error('writing more to entry than is appropriate');\n    this.blockRemain -= writeLen;\n    return super.write(data);\n  }\n\n  end() {\n    if (this.blockRemain) super.write(Buffer.alloc(this.blockRemain));\n    return super.end();\n  }\n\n});\nWriteEntry.Sync = WriteEntrySync;\nWriteEntry.Tar = WriteEntryTar;\n\nconst getType = stat => stat.isFile() ? 'File' : stat.isDirectory() ? 'Directory' : stat.isSymbolicLink() ? 'SymbolicLink' : 'Unsupported';\n\nmodule.exports = WriteEntry;","map":{"version":3,"sources":["C:/Users/ojaswi/Social - Media web app/frontend-react-app/node_modules/tar/lib/write-entry.js"],"names":["MiniPass","require","Pax","Header","fs","path","normPath","stripSlash","prefixPath","prefix","replace","maxReadSize","PROCESS","Symbol","FILE","DIRECTORY","SYMLINK","HARDLINK","HEADER","READ","LSTAT","ONLSTAT","ONREAD","ONREADLINK","OPENFILE","ONOPENFILE","CLOSE","MODE","AWAITDRAIN","ONDRAIN","PREFIX","HAD_ERROR","warner","winchars","stripAbsolutePath","modeFix","WriteEntry","constructor","p","opt","TypeError","portable","myuid","process","getuid","myuser","env","USER","linkCache","Map","statCache","preservePaths","cwd","strict","noPax","noMtime","mtime","fd","blockLen","blockRemain","buf","offset","length","pos","remain","onwarn","on","pathWarn","root","stripped","win32","platform","decode","absolute","resolve","warn","entry","has","get","emit","ev","data","lstat","er","stat","set","isFile","size","type","getType","end","mode","header","linkpath","uid","gid","uname","atime","ctime","encode","write","dev","ino","nlink","block","substr","readlink","relative","linkKey","indexOf","open","Math","ceil","bufLen","min","Buffer","allocUnsafe","read","bytesRead","cb","close","Error","syscall","code","i","writeBuf","slice","flushed","once","alloc","WriteEntrySync","lstatSync","readlinkSync","openSync","threw","readSync","closeSync","WriteEntryTar","readEntry","gname","startBlockSize","pipe","writeLen","Sync","Tar","isDirectory","isSymbolicLink","module","exports"],"mappings":"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","sourcesContent":["'use strict'\nconst MiniPass = require('minipass')\nconst Pax = require('./pax.js')\nconst Header = require('./header.js')\nconst fs = require('fs')\nconst path = require('path')\nconst normPath = require('./normalize-windows-path.js')\nconst stripSlash = require('./strip-trailing-slashes.js')\n\nconst prefixPath = (path, prefix) => {\n  if (!prefix)\n    return normPath(path)\n  path = normPath(path).replace(/^\\.(\\/|$)/, '')\n  return stripSlash(prefix) + '/' + path\n}\n\nconst maxReadSize = 16 * 1024 * 1024\nconst PROCESS = Symbol('process')\nconst FILE = Symbol('file')\nconst DIRECTORY = Symbol('directory')\nconst SYMLINK = Symbol('symlink')\nconst HARDLINK = Symbol('hardlink')\nconst HEADER = Symbol('header')\nconst READ = Symbol('read')\nconst LSTAT = Symbol('lstat')\nconst ONLSTAT = Symbol('onlstat')\nconst ONREAD = Symbol('onread')\nconst ONREADLINK = Symbol('onreadlink')\nconst OPENFILE = Symbol('openfile')\nconst ONOPENFILE = Symbol('onopenfile')\nconst CLOSE = Symbol('close')\nconst MODE = Symbol('mode')\nconst AWAITDRAIN = Symbol('awaitDrain')\nconst ONDRAIN = Symbol('ondrain')\nconst PREFIX = Symbol('prefix')\nconst HAD_ERROR = Symbol('hadError')\nconst warner = require('./warn-mixin.js')\nconst winchars = require('./winchars.js')\nconst stripAbsolutePath = require('./strip-absolute-path.js')\n\nconst modeFix = require('./mode-fix.js')\n\nconst WriteEntry = warner(class WriteEntry extends MiniPass {\n  constructor (p, opt) {\n    opt = opt || {}\n    super(opt)\n    if (typeof p !== 'string')\n      throw new TypeError('path is required')\n    this.path = normPath(p)\n    // suppress atime, ctime, uid, gid, uname, gname\n    this.portable = !!opt.portable\n    // until node has builtin pwnam functions, this'll have to do\n    this.myuid = process.getuid && process.getuid() || 0\n    this.myuser = process.env.USER || ''\n    this.maxReadSize = opt.maxReadSize || maxReadSize\n    this.linkCache = opt.linkCache || new Map()\n    this.statCache = opt.statCache || new Map()\n    this.preservePaths = !!opt.preservePaths\n    this.cwd = normPath(opt.cwd || process.cwd())\n    this.strict = !!opt.strict\n    this.noPax = !!opt.noPax\n    this.noMtime = !!opt.noMtime\n    this.mtime = opt.mtime || null\n    this.prefix = opt.prefix ? normPath(opt.prefix) : null\n\n    this.fd = null\n    this.blockLen = null\n    this.blockRemain = null\n    this.buf = null\n    this.offset = null\n    this.length = null\n    this.pos = null\n    this.remain = null\n\n    if (typeof opt.onwarn === 'function')\n      this.on('warn', opt.onwarn)\n\n    let pathWarn = false\n    if (!this.preservePaths) {\n      const [root, stripped] = stripAbsolutePath(this.path)\n      if (root) {\n        this.path = stripped\n        pathWarn = root\n      }\n    }\n\n    this.win32 = !!opt.win32 || process.platform === 'win32'\n    if (this.win32) {\n      // force the \\ to / normalization, since we might not *actually*\n      // be on windows, but want \\ to be considered a path separator.\n      this.path = winchars.decode(this.path.replace(/\\\\/g, '/'))\n      p = p.replace(/\\\\/g, '/')\n    }\n\n    this.absolute = normPath(opt.absolute || path.resolve(this.cwd, p))\n\n    if (this.path === '')\n      this.path = './'\n\n    if (pathWarn) {\n      this.warn('TAR_ENTRY_INFO', `stripping ${pathWarn} from absolute path`, {\n        entry: this,\n        path: pathWarn + this.path,\n      })\n    }\n\n    if (this.statCache.has(this.absolute))\n      this[ONLSTAT](this.statCache.get(this.absolute))\n    else\n      this[LSTAT]()\n  }\n\n  emit (ev, ...data) {\n    if (ev === 'error')\n      this[HAD_ERROR] = true\n    return super.emit(ev, ...data)\n  }\n\n  [LSTAT] () {\n    fs.lstat(this.absolute, (er, stat) => {\n      if (er)\n        return this.emit('error', er)\n      this[ONLSTAT](stat)\n    })\n  }\n\n  [ONLSTAT] (stat) {\n    this.statCache.set(this.absolute, stat)\n    this.stat = stat\n    if (!stat.isFile())\n      stat.size = 0\n    this.type = getType(stat)\n    this.emit('stat', stat)\n    this[PROCESS]()\n  }\n\n  [PROCESS] () {\n    switch (this.type) {\n      case 'File': return this[FILE]()\n      case 'Directory': return this[DIRECTORY]()\n      case 'SymbolicLink': return this[SYMLINK]()\n      // unsupported types are ignored.\n      default: return this.end()\n    }\n  }\n\n  [MODE] (mode) {\n    return modeFix(mode, this.type === 'Directory', this.portable)\n  }\n\n  [PREFIX] (path) {\n    return prefixPath(path, this.prefix)\n  }\n\n  [HEADER] () {\n    if (this.type === 'Directory' && this.portable)\n      this.noMtime = true\n\n    this.header = new Header({\n      path: this[PREFIX](this.path),\n      // only apply the prefix to hard links.\n      linkpath: this.type === 'Link' ? this[PREFIX](this.linkpath)\n      : this.linkpath,\n      // only the permissions and setuid/setgid/sticky bitflags\n      // not the higher-order bits that specify file type\n      mode: this[MODE](this.stat.mode),\n      uid: this.portable ? null : this.stat.uid,\n      gid: this.portable ? null : this.stat.gid,\n      size: this.stat.size,\n      mtime: this.noMtime ? null : this.mtime || this.stat.mtime,\n      type: this.type,\n      uname: this.portable ? null :\n      this.stat.uid === this.myuid ? this.myuser : '',\n      atime: this.portable ? null : this.stat.atime,\n      ctime: this.portable ? null : this.stat.ctime,\n    })\n\n    if (this.header.encode() && !this.noPax) {\n      super.write(new Pax({\n        atime: this.portable ? null : this.header.atime,\n        ctime: this.portable ? null : this.header.ctime,\n        gid: this.portable ? null : this.header.gid,\n        mtime: this.noMtime ? null : this.mtime || this.header.mtime,\n        path: this[PREFIX](this.path),\n        linkpath: this.type === 'Link' ? this[PREFIX](this.linkpath)\n        : this.linkpath,\n        size: this.header.size,\n        uid: this.portable ? null : this.header.uid,\n        uname: this.portable ? null : this.header.uname,\n        dev: this.portable ? null : this.stat.dev,\n        ino: this.portable ? null : this.stat.ino,\n        nlink: this.portable ? null : this.stat.nlink,\n      }).encode())\n    }\n    super.write(this.header.block)\n  }\n\n  [DIRECTORY] () {\n    if (this.path.substr(-1) !== '/')\n      this.path += '/'\n    this.stat.size = 0\n    this[HEADER]()\n    this.end()\n  }\n\n  [SYMLINK] () {\n    fs.readlink(this.absolute, (er, linkpath) => {\n      if (er)\n        return this.emit('error', er)\n      this[ONREADLINK](linkpath)\n    })\n  }\n\n  [ONREADLINK] (linkpath) {\n    this.linkpath = normPath(linkpath)\n    this[HEADER]()\n    this.end()\n  }\n\n  [HARDLINK] (linkpath) {\n    this.type = 'Link'\n    this.linkpath = normPath(path.relative(this.cwd, linkpath))\n    this.stat.size = 0\n    this[HEADER]()\n    this.end()\n  }\n\n  [FILE] () {\n    if (this.stat.nlink > 1) {\n      const linkKey = this.stat.dev + ':' + this.stat.ino\n      if (this.linkCache.has(linkKey)) {\n        const linkpath = this.linkCache.get(linkKey)\n        if (linkpath.indexOf(this.cwd) === 0)\n          return this[HARDLINK](linkpath)\n      }\n      this.linkCache.set(linkKey, this.absolute)\n    }\n\n    this[HEADER]()\n    if (this.stat.size === 0)\n      return this.end()\n\n    this[OPENFILE]()\n  }\n\n  [OPENFILE] () {\n    fs.open(this.absolute, 'r', (er, fd) => {\n      if (er)\n        return this.emit('error', er)\n      this[ONOPENFILE](fd)\n    })\n  }\n\n  [ONOPENFILE] (fd) {\n    this.fd = fd\n    if (this[HAD_ERROR])\n      return this[CLOSE]()\n\n    this.blockLen = 512 * Math.ceil(this.stat.size / 512)\n    this.blockRemain = this.blockLen\n    const bufLen = Math.min(this.blockLen, this.maxReadSize)\n    this.buf = Buffer.allocUnsafe(bufLen)\n    this.offset = 0\n    this.pos = 0\n    this.remain = this.stat.size\n    this.length = this.buf.length\n    this[READ]()\n  }\n\n  [READ] () {\n    const { fd, buf, offset, length, pos } = this\n    fs.read(fd, buf, offset, length, pos, (er, bytesRead) => {\n      if (er) {\n        // ignoring the error from close(2) is a bad practice, but at\n        // this point we already have an error, don't need another one\n        return this[CLOSE](() => this.emit('error', er))\n      }\n      this[ONREAD](bytesRead)\n    })\n  }\n\n  [CLOSE] (cb) {\n    fs.close(this.fd, cb)\n  }\n\n  [ONREAD] (bytesRead) {\n    if (bytesRead <= 0 && this.remain > 0) {\n      const er = new Error('encountered unexpected EOF')\n      er.path = this.absolute\n      er.syscall = 'read'\n      er.code = 'EOF'\n      return this[CLOSE](() => this.emit('error', er))\n    }\n\n    if (bytesRead > this.remain) {\n      const er = new Error('did not encounter expected EOF')\n      er.path = this.absolute\n      er.syscall = 'read'\n      er.code = 'EOF'\n      return this[CLOSE](() => this.emit('error', er))\n    }\n\n    // null out the rest of the buffer, if we could fit the block padding\n    // at the end of this loop, we've incremented bytesRead and this.remain\n    // to be incremented up to the blockRemain level, as if we had expected\n    // to get a null-padded file, and read it until the end.  then we will\n    // decrement both remain and blockRemain by bytesRead, and know that we\n    // reached the expected EOF, without any null buffer to append.\n    if (bytesRead === this.remain) {\n      for (let i = bytesRead; i < this.length && bytesRead < this.blockRemain; i++) {\n        this.buf[i + this.offset] = 0\n        bytesRead++\n        this.remain++\n      }\n    }\n\n    const writeBuf = this.offset === 0 && bytesRead === this.buf.length ?\n      this.buf : this.buf.slice(this.offset, this.offset + bytesRead)\n\n    const flushed = this.write(writeBuf)\n    if (!flushed)\n      this[AWAITDRAIN](() => this[ONDRAIN]())\n    else\n      this[ONDRAIN]()\n  }\n\n  [AWAITDRAIN] (cb) {\n    this.once('drain', cb)\n  }\n\n  write (writeBuf) {\n    if (this.blockRemain < writeBuf.length) {\n      const er = new Error('writing more data than expected')\n      er.path = this.absolute\n      return this.emit('error', er)\n    }\n    this.remain -= writeBuf.length\n    this.blockRemain -= writeBuf.length\n    this.pos += writeBuf.length\n    this.offset += writeBuf.length\n    return super.write(writeBuf)\n  }\n\n  [ONDRAIN] () {\n    if (!this.remain) {\n      if (this.blockRemain)\n        super.write(Buffer.alloc(this.blockRemain))\n      return this[CLOSE](er => er ? this.emit('error', er) : this.end())\n    }\n\n    if (this.offset >= this.length) {\n      // if we only have a smaller bit left to read, alloc a smaller buffer\n      // otherwise, keep it the same length it was before.\n      this.buf = Buffer.allocUnsafe(Math.min(this.blockRemain, this.buf.length))\n      this.offset = 0\n    }\n    this.length = this.buf.length - this.offset\n    this[READ]()\n  }\n})\n\nclass WriteEntrySync extends WriteEntry {\n  [LSTAT] () {\n    this[ONLSTAT](fs.lstatSync(this.absolute))\n  }\n\n  [SYMLINK] () {\n    this[ONREADLINK](fs.readlinkSync(this.absolute))\n  }\n\n  [OPENFILE] () {\n    this[ONOPENFILE](fs.openSync(this.absolute, 'r'))\n  }\n\n  [READ] () {\n    let threw = true\n    try {\n      const { fd, buf, offset, length, pos } = this\n      const bytesRead = fs.readSync(fd, buf, offset, length, pos)\n      this[ONREAD](bytesRead)\n      threw = false\n    } finally {\n      // ignoring the error from close(2) is a bad practice, but at\n      // this point we already have an error, don't need another one\n      if (threw) {\n        try {\n          this[CLOSE](() => {})\n        } catch (er) {}\n      }\n    }\n  }\n\n  [AWAITDRAIN] (cb) {\n    cb()\n  }\n\n  [CLOSE] (cb) {\n    fs.closeSync(this.fd)\n    cb()\n  }\n}\n\nconst WriteEntryTar = warner(class WriteEntryTar extends MiniPass {\n  constructor (readEntry, opt) {\n    opt = opt || {}\n    super(opt)\n    this.preservePaths = !!opt.preservePaths\n    this.portable = !!opt.portable\n    this.strict = !!opt.strict\n    this.noPax = !!opt.noPax\n    this.noMtime = !!opt.noMtime\n\n    this.readEntry = readEntry\n    this.type = readEntry.type\n    if (this.type === 'Directory' && this.portable)\n      this.noMtime = true\n\n    this.prefix = opt.prefix || null\n\n    this.path = normPath(readEntry.path)\n    this.mode = this[MODE](readEntry.mode)\n    this.uid = this.portable ? null : readEntry.uid\n    this.gid = this.portable ? null : readEntry.gid\n    this.uname = this.portable ? null : readEntry.uname\n    this.gname = this.portable ? null : readEntry.gname\n    this.size = readEntry.size\n    this.mtime = this.noMtime ? null : opt.mtime || readEntry.mtime\n    this.atime = this.portable ? null : readEntry.atime\n    this.ctime = this.portable ? null : readEntry.ctime\n    this.linkpath = normPath(readEntry.linkpath)\n\n    if (typeof opt.onwarn === 'function')\n      this.on('warn', opt.onwarn)\n\n    let pathWarn = false\n    if (!this.preservePaths) {\n      const [root, stripped] = stripAbsolutePath(this.path)\n      if (root) {\n        this.path = stripped\n        pathWarn = root\n      }\n    }\n\n    this.remain = readEntry.size\n    this.blockRemain = readEntry.startBlockSize\n\n    this.header = new Header({\n      path: this[PREFIX](this.path),\n      linkpath: this.type === 'Link' ? this[PREFIX](this.linkpath)\n      : this.linkpath,\n      // only the permissions and setuid/setgid/sticky bitflags\n      // not the higher-order bits that specify file type\n      mode: this.mode,\n      uid: this.portable ? null : this.uid,\n      gid: this.portable ? null : this.gid,\n      size: this.size,\n      mtime: this.noMtime ? null : this.mtime,\n      type: this.type,\n      uname: this.portable ? null : this.uname,\n      atime: this.portable ? null : this.atime,\n      ctime: this.portable ? null : this.ctime,\n    })\n\n    if (pathWarn) {\n      this.warn('TAR_ENTRY_INFO', `stripping ${pathWarn} from absolute path`, {\n        entry: this,\n        path: pathWarn + this.path,\n      })\n    }\n\n    if (this.header.encode() && !this.noPax) {\n      super.write(new Pax({\n        atime: this.portable ? null : this.atime,\n        ctime: this.portable ? null : this.ctime,\n        gid: this.portable ? null : this.gid,\n        mtime: this.noMtime ? null : this.mtime,\n        path: this[PREFIX](this.path),\n        linkpath: this.type === 'Link' ? this[PREFIX](this.linkpath)\n        : this.linkpath,\n        size: this.size,\n        uid: this.portable ? null : this.uid,\n        uname: this.portable ? null : this.uname,\n        dev: this.portable ? null : this.readEntry.dev,\n        ino: this.portable ? null : this.readEntry.ino,\n        nlink: this.portable ? null : this.readEntry.nlink,\n      }).encode())\n    }\n\n    super.write(this.header.block)\n    readEntry.pipe(this)\n  }\n\n  [PREFIX] (path) {\n    return prefixPath(path, this.prefix)\n  }\n\n  [MODE] (mode) {\n    return modeFix(mode, this.type === 'Directory', this.portable)\n  }\n\n  write (data) {\n    const writeLen = data.length\n    if (writeLen > this.blockRemain)\n      throw new Error('writing more to entry than is appropriate')\n    this.blockRemain -= writeLen\n    return super.write(data)\n  }\n\n  end () {\n    if (this.blockRemain)\n      super.write(Buffer.alloc(this.blockRemain))\n    return super.end()\n  }\n})\n\nWriteEntry.Sync = WriteEntrySync\nWriteEntry.Tar = WriteEntryTar\n\nconst getType = stat =>\n  stat.isFile() ? 'File'\n  : stat.isDirectory() ? 'Directory'\n  : stat.isSymbolicLink() ? 'SymbolicLink'\n  : 'Unsupported'\n\nmodule.exports = WriteEntry\n"]},"metadata":{},"sourceType":"script"}