{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\n\nmodule.exports = exports;\nconst versionArray = process.version.substr(1).replace(/-.*$/, '').split('.').map(item => {\n  return +item;\n});\nconst napi_multiple_commands = ['build', 'clean', 'configure', 'package', 'publish', 'reveal', 'testbinary', 'testpackage', 'unpublish'];\nconst napi_build_version_tag = 'napi_build_version=';\n\nmodule.exports.get_napi_version = function () {\n  // returns the non-zero numeric napi version or undefined if napi is not supported.\n  // correctly supporting target requires an updated cross-walk\n  let version = process.versions.napi; // can be undefined\n\n  if (!version) {\n    // this code should never need to be updated\n    if (versionArray[0] === 9 && versionArray[1] >= 3) version = 2; // 9.3.0+\n    else if (versionArray[0] === 8) version = 1; // 8.0.0+\n  }\n\n  return version;\n};\n\nmodule.exports.get_napi_version_as_string = function (target) {\n  // returns the napi version as a string or an empty string if napi is not supported.\n  const version = module.exports.get_napi_version(target);\n  return version ? '' + version : '';\n};\n\nmodule.exports.validate_package_json = function (package_json, opts) {\n  // throws Error\n  const binary = package_json.binary;\n  const module_path_ok = pathOK(binary.module_path);\n  const remote_path_ok = pathOK(binary.remote_path);\n  const package_name_ok = pathOK(binary.package_name);\n  const napi_build_versions = module.exports.get_napi_build_versions(package_json, opts, true);\n  const napi_build_versions_raw = module.exports.get_napi_build_versions_raw(package_json);\n\n  if (napi_build_versions) {\n    napi_build_versions.forEach(napi_build_version => {\n      if (!(parseInt(napi_build_version, 10) === napi_build_version && napi_build_version > 0)) {\n        throw new Error('All values specified in napi_versions must be positive integers.');\n      }\n    });\n  }\n\n  if (napi_build_versions && (!module_path_ok || !remote_path_ok && !package_name_ok)) {\n    throw new Error('When napi_versions is specified; module_path and either remote_path or ' + \"package_name must contain the substitution string '{napi_build_version}`.\");\n  }\n\n  if ((module_path_ok || remote_path_ok || package_name_ok) && !napi_build_versions_raw) {\n    throw new Error(\"When the substitution string '{napi_build_version}` is specified in \" + 'module_path, remote_path, or package_name; napi_versions must also be specified.');\n  }\n\n  if (napi_build_versions && !module.exports.get_best_napi_build_version(package_json, opts) && module.exports.build_napi_only(package_json)) {\n    throw new Error('The Node-API version of this Node instance is ' + module.exports.get_napi_version(opts ? opts.target : undefined) + '. ' + 'This module supports Node-API version(s) ' + module.exports.get_napi_build_versions_raw(package_json) + '. ' + 'This Node instance cannot run this module.');\n  }\n\n  if (napi_build_versions_raw && !napi_build_versions && module.exports.build_napi_only(package_json)) {\n    throw new Error('The Node-API version of this Node instance is ' + module.exports.get_napi_version(opts ? opts.target : undefined) + '. ' + 'This module supports Node-API version(s) ' + module.exports.get_napi_build_versions_raw(package_json) + '. ' + 'This Node instance cannot run this module.');\n  }\n};\n\nfunction pathOK(path) {\n  return path && (path.indexOf('{napi_build_version}') !== -1 || path.indexOf('{node_napi_label}') !== -1);\n}\n\nmodule.exports.expand_commands = function (package_json, opts, commands) {\n  const expanded_commands = [];\n  const napi_build_versions = module.exports.get_napi_build_versions(package_json, opts);\n  commands.forEach(command => {\n    if (napi_build_versions && command.name === 'install') {\n      const napi_build_version = module.exports.get_best_napi_build_version(package_json, opts);\n      const args = napi_build_version ? [napi_build_version_tag + napi_build_version] : [];\n      expanded_commands.push({\n        name: command.name,\n        args: args\n      });\n    } else if (napi_build_versions && napi_multiple_commands.indexOf(command.name) !== -1) {\n      napi_build_versions.forEach(napi_build_version => {\n        const args = command.args.slice();\n        args.push(napi_build_version_tag + napi_build_version);\n        expanded_commands.push({\n          name: command.name,\n          args: args\n        });\n      });\n    } else {\n      expanded_commands.push(command);\n    }\n  });\n  return expanded_commands;\n};\n\nmodule.exports.get_napi_build_versions = function (package_json, opts, warnings) {\n  // opts may be undefined\n  const log = require('npmlog');\n\n  let napi_build_versions = [];\n  const supported_napi_version = module.exports.get_napi_version(opts ? opts.target : undefined); // remove duplicates, verify each napi version can actaully be built\n\n  if (package_json.binary && package_json.binary.napi_versions) {\n    package_json.binary.napi_versions.forEach(napi_version => {\n      const duplicated = napi_build_versions.indexOf(napi_version) !== -1;\n\n      if (!duplicated && supported_napi_version && napi_version <= supported_napi_version) {\n        napi_build_versions.push(napi_version);\n      } else if (warnings && !duplicated && supported_napi_version) {\n        log.info('This Node instance does not support builds for Node-API version', napi_version);\n      }\n    });\n  }\n\n  if (opts && opts['build-latest-napi-version-only']) {\n    let latest_version = 0;\n    napi_build_versions.forEach(napi_version => {\n      if (napi_version > latest_version) latest_version = napi_version;\n    });\n    napi_build_versions = latest_version ? [latest_version] : [];\n  }\n\n  return napi_build_versions.length ? napi_build_versions : undefined;\n};\n\nmodule.exports.get_napi_build_versions_raw = function (package_json) {\n  const napi_build_versions = []; // remove duplicates\n\n  if (package_json.binary && package_json.binary.napi_versions) {\n    package_json.binary.napi_versions.forEach(napi_version => {\n      if (napi_build_versions.indexOf(napi_version) === -1) {\n        napi_build_versions.push(napi_version);\n      }\n    });\n  }\n\n  return napi_build_versions.length ? napi_build_versions : undefined;\n};\n\nmodule.exports.get_command_arg = function (napi_build_version) {\n  return napi_build_version_tag + napi_build_version;\n};\n\nmodule.exports.get_napi_build_version_from_command_args = function (command_args) {\n  for (let i = 0; i < command_args.length; i++) {\n    const arg = command_args[i];\n\n    if (arg.indexOf(napi_build_version_tag) === 0) {\n      return parseInt(arg.substr(napi_build_version_tag.length), 10);\n    }\n  }\n\n  return undefined;\n};\n\nmodule.exports.swap_build_dir_out = function (napi_build_version) {\n  if (napi_build_version) {\n    const rm = require('rimraf');\n\n    rm.sync(module.exports.get_build_dir(napi_build_version));\n    fs.renameSync('build', module.exports.get_build_dir(napi_build_version));\n  }\n};\n\nmodule.exports.swap_build_dir_in = function (napi_build_version) {\n  if (napi_build_version) {\n    const rm = require('rimraf');\n\n    rm.sync('build');\n    fs.renameSync(module.exports.get_build_dir(napi_build_version), 'build');\n  }\n};\n\nmodule.exports.get_build_dir = function (napi_build_version) {\n  return 'build-tmp-napi-v' + napi_build_version;\n};\n\nmodule.exports.get_best_napi_build_version = function (package_json, opts) {\n  let best_napi_build_version = 0;\n  const napi_build_versions = module.exports.get_napi_build_versions(package_json, opts);\n\n  if (napi_build_versions) {\n    const our_napi_version = module.exports.get_napi_version(opts ? opts.target : undefined);\n    napi_build_versions.forEach(napi_build_version => {\n      if (napi_build_version > best_napi_build_version && napi_build_version <= our_napi_version) {\n        best_napi_build_version = napi_build_version;\n      }\n    });\n  }\n\n  return best_napi_build_version === 0 ? undefined : best_napi_build_version;\n};\n\nmodule.exports.build_napi_only = function (package_json) {\n  return package_json.binary && package_json.binary.package_name && package_json.binary.package_name.indexOf('{node_napi_label}') === -1;\n};","map":{"version":3,"sources":["C:/Users/ojaswi/Social - Media web app/frontend-react-app/node_modules/@mapbox/node-pre-gyp/lib/util/napi.js"],"names":["fs","require","module","exports","versionArray","process","version","substr","replace","split","map","item","napi_multiple_commands","napi_build_version_tag","get_napi_version","versions","napi","get_napi_version_as_string","target","validate_package_json","package_json","opts","binary","module_path_ok","pathOK","module_path","remote_path_ok","remote_path","package_name_ok","package_name","napi_build_versions","get_napi_build_versions","napi_build_versions_raw","get_napi_build_versions_raw","forEach","napi_build_version","parseInt","Error","get_best_napi_build_version","build_napi_only","undefined","path","indexOf","expand_commands","commands","expanded_commands","command","name","args","push","slice","warnings","log","supported_napi_version","napi_versions","napi_version","duplicated","info","latest_version","length","get_command_arg","get_napi_build_version_from_command_args","command_args","i","arg","swap_build_dir_out","rm","sync","get_build_dir","renameSync","swap_build_dir_in","best_napi_build_version","our_napi_version"],"mappings":"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","sourcesContent":["'use strict';\n\nconst fs = require('fs');\n\nmodule.exports = exports;\n\nconst versionArray = process.version\n  .substr(1)\n  .replace(/-.*$/, '')\n  .split('.')\n  .map((item) => {\n    return +item;\n  });\n\nconst napi_multiple_commands = [\n  'build',\n  'clean',\n  'configure',\n  'package',\n  'publish',\n  'reveal',\n  'testbinary',\n  'testpackage',\n  'unpublish'\n];\n\nconst napi_build_version_tag = 'napi_build_version=';\n\nmodule.exports.get_napi_version = function() {\n  // returns the non-zero numeric napi version or undefined if napi is not supported.\n  // correctly supporting target requires an updated cross-walk\n  let version = process.versions.napi; // can be undefined\n  if (!version) { // this code should never need to be updated\n    if (versionArray[0] === 9 && versionArray[1] >= 3) version = 2; // 9.3.0+\n    else if (versionArray[0] === 8) version = 1; // 8.0.0+\n  }\n  return version;\n};\n\nmodule.exports.get_napi_version_as_string = function(target) {\n  // returns the napi version as a string or an empty string if napi is not supported.\n  const version = module.exports.get_napi_version(target);\n  return version ? '' + version : '';\n};\n\nmodule.exports.validate_package_json = function(package_json, opts) { // throws Error\n\n  const binary = package_json.binary;\n  const module_path_ok = pathOK(binary.module_path);\n  const remote_path_ok = pathOK(binary.remote_path);\n  const package_name_ok = pathOK(binary.package_name);\n  const napi_build_versions = module.exports.get_napi_build_versions(package_json, opts, true);\n  const napi_build_versions_raw = module.exports.get_napi_build_versions_raw(package_json);\n\n  if (napi_build_versions) {\n    napi_build_versions.forEach((napi_build_version)=> {\n      if (!(parseInt(napi_build_version, 10) === napi_build_version && napi_build_version > 0)) {\n        throw new Error('All values specified in napi_versions must be positive integers.');\n      }\n    });\n  }\n\n  if (napi_build_versions && (!module_path_ok || (!remote_path_ok && !package_name_ok))) {\n    throw new Error('When napi_versions is specified; module_path and either remote_path or ' +\n\t\t\t\"package_name must contain the substitution string '{napi_build_version}`.\");\n  }\n\n  if ((module_path_ok || remote_path_ok || package_name_ok) && !napi_build_versions_raw) {\n    throw new Error(\"When the substitution string '{napi_build_version}` is specified in \" +\n\t\t\t'module_path, remote_path, or package_name; napi_versions must also be specified.');\n  }\n\n  if (napi_build_versions && !module.exports.get_best_napi_build_version(package_json, opts) &&\n\tmodule.exports.build_napi_only(package_json)) {\n    throw new Error(\n      'The Node-API version of this Node instance is ' + module.exports.get_napi_version(opts ? opts.target : undefined) + '. ' +\n\t\t\t'This module supports Node-API version(s) ' + module.exports.get_napi_build_versions_raw(package_json) + '. ' +\n\t\t\t'This Node instance cannot run this module.');\n  }\n\n  if (napi_build_versions_raw && !napi_build_versions && module.exports.build_napi_only(package_json)) {\n    throw new Error(\n      'The Node-API version of this Node instance is ' + module.exports.get_napi_version(opts ? opts.target : undefined) + '. ' +\n\t\t\t'This module supports Node-API version(s) ' + module.exports.get_napi_build_versions_raw(package_json) + '. ' +\n\t\t\t'This Node instance cannot run this module.');\n  }\n\n};\n\nfunction pathOK(path) {\n  return path && (path.indexOf('{napi_build_version}') !== -1 || path.indexOf('{node_napi_label}') !== -1);\n}\n\nmodule.exports.expand_commands = function(package_json, opts, commands) {\n  const expanded_commands = [];\n  const napi_build_versions = module.exports.get_napi_build_versions(package_json, opts);\n  commands.forEach((command)=> {\n    if (napi_build_versions && command.name === 'install') {\n      const napi_build_version = module.exports.get_best_napi_build_version(package_json, opts);\n      const args = napi_build_version ? [napi_build_version_tag + napi_build_version] : [];\n      expanded_commands.push({ name: command.name, args: args });\n    } else if (napi_build_versions && napi_multiple_commands.indexOf(command.name) !== -1) {\n      napi_build_versions.forEach((napi_build_version)=> {\n        const args = command.args.slice();\n        args.push(napi_build_version_tag + napi_build_version);\n        expanded_commands.push({ name: command.name, args: args });\n      });\n    } else {\n      expanded_commands.push(command);\n    }\n  });\n  return expanded_commands;\n};\n\nmodule.exports.get_napi_build_versions = function(package_json, opts, warnings) { // opts may be undefined\n  const log = require('npmlog');\n  let napi_build_versions = [];\n  const supported_napi_version = module.exports.get_napi_version(opts ? opts.target : undefined);\n  // remove duplicates, verify each napi version can actaully be built\n  if (package_json.binary && package_json.binary.napi_versions) {\n    package_json.binary.napi_versions.forEach((napi_version) => {\n      const duplicated = napi_build_versions.indexOf(napi_version) !== -1;\n      if (!duplicated && supported_napi_version && napi_version <= supported_napi_version) {\n        napi_build_versions.push(napi_version);\n      } else if (warnings && !duplicated && supported_napi_version) {\n        log.info('This Node instance does not support builds for Node-API version', napi_version);\n      }\n    });\n  }\n  if (opts && opts['build-latest-napi-version-only']) {\n    let latest_version = 0;\n    napi_build_versions.forEach((napi_version) => {\n      if (napi_version > latest_version) latest_version = napi_version;\n    });\n    napi_build_versions = latest_version ? [latest_version] : [];\n  }\n  return napi_build_versions.length ? napi_build_versions : undefined;\n};\n\nmodule.exports.get_napi_build_versions_raw = function(package_json) {\n  const napi_build_versions = [];\n  // remove duplicates\n  if (package_json.binary && package_json.binary.napi_versions) {\n    package_json.binary.napi_versions.forEach((napi_version) => {\n      if (napi_build_versions.indexOf(napi_version) === -1) {\n        napi_build_versions.push(napi_version);\n      }\n    });\n  }\n  return napi_build_versions.length ? napi_build_versions : undefined;\n};\n\nmodule.exports.get_command_arg = function(napi_build_version) {\n  return napi_build_version_tag + napi_build_version;\n};\n\nmodule.exports.get_napi_build_version_from_command_args = function(command_args) {\n  for (let i = 0; i < command_args.length; i++) {\n    const arg = command_args[i];\n    if (arg.indexOf(napi_build_version_tag) === 0) {\n      return parseInt(arg.substr(napi_build_version_tag.length), 10);\n    }\n  }\n  return undefined;\n};\n\nmodule.exports.swap_build_dir_out = function(napi_build_version) {\n  if (napi_build_version) {\n    const rm = require('rimraf');\n    rm.sync(module.exports.get_build_dir(napi_build_version));\n    fs.renameSync('build', module.exports.get_build_dir(napi_build_version));\n  }\n};\n\nmodule.exports.swap_build_dir_in = function(napi_build_version) {\n  if (napi_build_version) {\n    const rm = require('rimraf');\n    rm.sync('build');\n    fs.renameSync(module.exports.get_build_dir(napi_build_version), 'build');\n  }\n};\n\nmodule.exports.get_build_dir = function(napi_build_version) {\n  return 'build-tmp-napi-v' + napi_build_version;\n};\n\nmodule.exports.get_best_napi_build_version = function(package_json, opts) {\n  let best_napi_build_version = 0;\n  const napi_build_versions = module.exports.get_napi_build_versions(package_json, opts);\n  if (napi_build_versions) {\n    const our_napi_version = module.exports.get_napi_version(opts ? opts.target : undefined);\n    napi_build_versions.forEach((napi_build_version)=> {\n      if (napi_build_version > best_napi_build_version &&\n\t\t\t\tnapi_build_version <= our_napi_version) {\n        best_napi_build_version = napi_build_version;\n      }\n    });\n  }\n  return best_napi_build_version === 0 ? undefined : best_napi_build_version;\n};\n\nmodule.exports.build_napi_only = function(package_json) {\n  return package_json.binary && package_json.binary.package_name &&\n\tpackage_json.binary.package_name.indexOf('{node_napi_label}') === -1;\n};\n"]},"metadata":{},"sourceType":"script"}