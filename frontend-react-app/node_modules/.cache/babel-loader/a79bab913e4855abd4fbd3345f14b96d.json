{"ast":null,"code":"'use strict';\n\nfunction isArguments(thingy) {\n  return thingy != null && typeof thingy === 'object' && thingy.hasOwnProperty('callee');\n}\n\nvar types = {\n  '*': {\n    label: 'any',\n    check: function () {\n      return true;\n    }\n  },\n  A: {\n    label: 'array',\n    check: function (thingy) {\n      return Array.isArray(thingy) || isArguments(thingy);\n    }\n  },\n  S: {\n    label: 'string',\n    check: function (thingy) {\n      return typeof thingy === 'string';\n    }\n  },\n  N: {\n    label: 'number',\n    check: function (thingy) {\n      return typeof thingy === 'number';\n    }\n  },\n  F: {\n    label: 'function',\n    check: function (thingy) {\n      return typeof thingy === 'function';\n    }\n  },\n  O: {\n    label: 'object',\n    check: function (thingy) {\n      return typeof thingy === 'object' && thingy != null && !types.A.check(thingy) && !types.E.check(thingy);\n    }\n  },\n  B: {\n    label: 'boolean',\n    check: function (thingy) {\n      return typeof thingy === 'boolean';\n    }\n  },\n  E: {\n    label: 'error',\n    check: function (thingy) {\n      return thingy instanceof Error;\n    }\n  },\n  Z: {\n    label: 'null',\n    check: function (thingy) {\n      return thingy == null;\n    }\n  }\n};\n\nfunction addSchema(schema, arity) {\n  var group = arity[schema.length] = arity[schema.length] || [];\n  if (group.indexOf(schema) === -1) group.push(schema);\n}\n\nvar validate = module.exports = function (rawSchemas, args) {\n  if (arguments.length !== 2) throw wrongNumberOfArgs(['SA'], arguments.length);\n  if (!rawSchemas) throw missingRequiredArg(0, 'rawSchemas');\n  if (!args) throw missingRequiredArg(1, 'args');\n  if (!types.S.check(rawSchemas)) throw invalidType(0, ['string'], rawSchemas);\n  if (!types.A.check(args)) throw invalidType(1, ['array'], args);\n  var schemas = rawSchemas.split('|');\n  var arity = {};\n  schemas.forEach(function (schema) {\n    for (var ii = 0; ii < schema.length; ++ii) {\n      var type = schema[ii];\n      if (!types[type]) throw unknownType(ii, type);\n    }\n\n    if (/E.*E/.test(schema)) throw moreThanOneError(schema);\n    addSchema(schema, arity);\n\n    if (/E/.test(schema)) {\n      addSchema(schema.replace(/E.*$/, 'E'), arity);\n      addSchema(schema.replace(/E/, 'Z'), arity);\n      if (schema.length === 1) addSchema('', arity);\n    }\n  });\n  var matching = arity[args.length];\n\n  if (!matching) {\n    throw wrongNumberOfArgs(Object.keys(arity), args.length);\n  }\n\n  for (var ii = 0; ii < args.length; ++ii) {\n    var newMatching = matching.filter(function (schema) {\n      var type = schema[ii];\n      var typeCheck = types[type].check;\n      return typeCheck(args[ii]);\n    });\n\n    if (!newMatching.length) {\n      var labels = matching.map(function (schema) {\n        return types[schema[ii]].label;\n      }).filter(function (schema) {\n        return schema != null;\n      });\n      throw invalidType(ii, labels, args[ii]);\n    }\n\n    matching = newMatching;\n  }\n};\n\nfunction missingRequiredArg(num) {\n  return newException('EMISSINGARG', 'Missing required argument #' + (num + 1));\n}\n\nfunction unknownType(num, type) {\n  return newException('EUNKNOWNTYPE', 'Unknown type ' + type + ' in argument #' + (num + 1));\n}\n\nfunction invalidType(num, expectedTypes, value) {\n  var valueType;\n  Object.keys(types).forEach(function (typeCode) {\n    if (types[typeCode].check(value)) valueType = types[typeCode].label;\n  });\n  return newException('EINVALIDTYPE', 'Argument #' + (num + 1) + ': Expected ' + englishList(expectedTypes) + ' but got ' + valueType);\n}\n\nfunction englishList(list) {\n  return list.join(', ').replace(/, ([^,]+)$/, ' or $1');\n}\n\nfunction wrongNumberOfArgs(expected, got) {\n  var english = englishList(expected);\n  var args = expected.every(function (ex) {\n    return ex.length === 1;\n  }) ? 'argument' : 'arguments';\n  return newException('EWRONGARGCOUNT', 'Expected ' + english + ' ' + args + ' but got ' + got);\n}\n\nfunction moreThanOneError(schema) {\n  return newException('ETOOMANYERRORTYPES', 'Only one error type per argument signature is allowed, more than one found in \"' + schema + '\"');\n}\n\nfunction newException(code, msg) {\n  var e = new Error(msg);\n  e.code = code;\n  if (Error.captureStackTrace) Error.captureStackTrace(e, validate);\n  return e;\n}","map":{"version":3,"sources":["C:/Users/ojaswi/Social - Media web app/frontend-react-app/node_modules/aproba/index.js"],"names":["isArguments","thingy","hasOwnProperty","types","label","check","A","Array","isArray","S","N","F","O","E","B","Error","Z","addSchema","schema","arity","group","length","indexOf","push","validate","module","exports","rawSchemas","args","arguments","wrongNumberOfArgs","missingRequiredArg","invalidType","schemas","split","forEach","ii","type","unknownType","test","moreThanOneError","replace","matching","Object","keys","newMatching","filter","typeCheck","labels","map","num","newException","expectedTypes","value","valueType","typeCode","englishList","list","join","expected","got","english","every","ex","code","msg","e","captureStackTrace"],"mappings":"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","sourcesContent":["'use strict'\n\nfunction isArguments (thingy) {\n  return thingy != null && typeof thingy === 'object' && thingy.hasOwnProperty('callee')\n}\n\nvar types = {\n  '*': {label: 'any', check: function () { return true }},\n  A: {label: 'array', check: function (thingy) { return Array.isArray(thingy) || isArguments(thingy) }},\n  S: {label: 'string', check: function (thingy) { return typeof thingy === 'string' }},\n  N: {label: 'number', check: function (thingy) { return typeof thingy === 'number' }},\n  F: {label: 'function', check: function (thingy) { return typeof thingy === 'function' }},\n  O: {label: 'object', check: function (thingy) { return typeof thingy === 'object' && thingy != null && !types.A.check(thingy) && !types.E.check(thingy) }},\n  B: {label: 'boolean', check: function (thingy) { return typeof thingy === 'boolean' }},\n  E: {label: 'error', check: function (thingy) { return thingy instanceof Error }},\n  Z: {label: 'null', check: function (thingy) { return thingy == null }}\n}\n\nfunction addSchema (schema, arity) {\n  var group = arity[schema.length] = arity[schema.length] || []\n  if (group.indexOf(schema) === -1) group.push(schema)\n}\n\nvar validate = module.exports = function (rawSchemas, args) {\n  if (arguments.length !== 2) throw wrongNumberOfArgs(['SA'], arguments.length)\n  if (!rawSchemas) throw missingRequiredArg(0, 'rawSchemas')\n  if (!args) throw missingRequiredArg(1, 'args')\n  if (!types.S.check(rawSchemas)) throw invalidType(0, ['string'], rawSchemas)\n  if (!types.A.check(args)) throw invalidType(1, ['array'], args)\n  var schemas = rawSchemas.split('|')\n  var arity = {}\n\n  schemas.forEach(function (schema) {\n    for (var ii = 0; ii < schema.length; ++ii) {\n      var type = schema[ii]\n      if (!types[type]) throw unknownType(ii, type)\n    }\n    if (/E.*E/.test(schema)) throw moreThanOneError(schema)\n    addSchema(schema, arity)\n    if (/E/.test(schema)) {\n      addSchema(schema.replace(/E.*$/, 'E'), arity)\n      addSchema(schema.replace(/E/, 'Z'), arity)\n      if (schema.length === 1) addSchema('', arity)\n    }\n  })\n  var matching = arity[args.length]\n  if (!matching) {\n    throw wrongNumberOfArgs(Object.keys(arity), args.length)\n  }\n  for (var ii = 0; ii < args.length; ++ii) {\n    var newMatching = matching.filter(function (schema) {\n      var type = schema[ii]\n      var typeCheck = types[type].check\n      return typeCheck(args[ii])\n    })\n    if (!newMatching.length) {\n      var labels = matching.map(function (schema) {\n        return types[schema[ii]].label\n      }).filter(function (schema) { return schema != null })\n      throw invalidType(ii, labels, args[ii])\n    }\n    matching = newMatching\n  }\n}\n\nfunction missingRequiredArg (num) {\n  return newException('EMISSINGARG', 'Missing required argument #' + (num + 1))\n}\n\nfunction unknownType (num, type) {\n  return newException('EUNKNOWNTYPE', 'Unknown type ' + type + ' in argument #' + (num + 1))\n}\n\nfunction invalidType (num, expectedTypes, value) {\n  var valueType\n  Object.keys(types).forEach(function (typeCode) {\n    if (types[typeCode].check(value)) valueType = types[typeCode].label\n  })\n  return newException('EINVALIDTYPE', 'Argument #' + (num + 1) + ': Expected ' +\n    englishList(expectedTypes) + ' but got ' + valueType)\n}\n\nfunction englishList (list) {\n  return list.join(', ').replace(/, ([^,]+)$/, ' or $1')\n}\n\nfunction wrongNumberOfArgs (expected, got) {\n  var english = englishList(expected)\n  var args = expected.every(function (ex) { return ex.length === 1 })\n    ? 'argument'\n    : 'arguments'\n  return newException('EWRONGARGCOUNT', 'Expected ' + english + ' ' + args + ' but got ' + got)\n}\n\nfunction moreThanOneError (schema) {\n  return newException('ETOOMANYERRORTYPES',\n    'Only one error type per argument signature is allowed, more than one found in \"' + schema + '\"')\n}\n\nfunction newException (code, msg) {\n  var e = new Error(msg)\n  e.code = code\n  if (Error.captureStackTrace) Error.captureStackTrace(e, validate)\n  return e\n}\n"]},"metadata":{},"sourceType":"script"}