{"ast":null,"code":"'use strict';\n/**\n * Module exports.\n */\n\nmodule.exports = exports;\n/**\n * Module dependencies.\n */\n// load mocking control function for accessing s3 via https. the function is a noop always returning\n// false if not mocking.\n\nexports.mockS3Http = require('./util/s3_setup').get_mockS3Http();\nexports.mockS3Http('on');\nconst mocking = exports.mockS3Http('get');\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst nopt = require('nopt');\n\nconst log = require('npmlog');\n\nlog.disableProgress();\n\nconst napi = require('./util/napi.js');\n\nconst EE = require('events').EventEmitter;\n\nconst inherits = require('util').inherits;\n\nconst cli_commands = ['clean', 'install', 'reinstall', 'build', 'rebuild', 'package', 'testpackage', 'publish', 'unpublish', 'info', 'testbinary', 'reveal', 'configure'];\nconst aliases = {}; // differentiate node-pre-gyp's logs from npm's\n\nlog.heading = 'node-pre-gyp';\n\nif (mocking) {\n  log.warn(`mocking s3 to ${process.env.node_pre_gyp_mock_s3}`);\n} // this is a getter to avoid circular reference warnings with node v14.\n\n\nObject.defineProperty(exports, 'find', {\n  get: function () {\n    return require('./pre-binding').find;\n  },\n  enumerable: true\n}); // in the following, \"my_module\" is using node-pre-gyp to\n// prebuild and install pre-built binaries. \"main_module\"\n// is using \"my_module\".\n//\n// \"bin/node-pre-gyp\" invokes Run() without a path. the\n// expectation is that the working directory is the package\n// root \"my_module\". this is true because in all cases npm is\n// executing a script in the context of \"my_module\".\n//\n// \"pre-binding.find()\" is executed by \"my_module\" but in the\n// context of \"main_module\". this is because \"main_module\" is\n// executing and requires \"my_module\" which is then executing\n// \"pre-binding.find()\" via \"node-pre-gyp.find()\", so the working\n// directory is that of \"main_module\".\n//\n// that's why \"find()\" must pass the path to package.json.\n//\n\nfunction Run(_ref) {\n  let {\n    package_json_path = './package.json',\n    argv\n  } = _ref;\n  this.package_json_path = package_json_path;\n  this.commands = {};\n  const self = this;\n  cli_commands.forEach(command => {\n    self.commands[command] = function (argvx, callback) {\n      log.verbose('command', command, argvx);\n      return require('./' + command)(self, argvx, callback);\n    };\n  });\n  this.parseArgv(argv); // this is set to true after the binary.host property was set to\n  // either staging_host or production_host.\n\n  this.binaryHostSet = false;\n}\n\ninherits(Run, EE);\nexports.Run = Run;\nconst proto = Run.prototype;\n/**\n * Export the contents of the package.json.\n */\n\nproto.package = require('../package.json');\n/**\n * nopt configuration definitions\n */\n\nproto.configDefs = {\n  help: Boolean,\n  // everywhere\n  arch: String,\n  // 'configure'\n  debug: Boolean,\n  // 'build'\n  directory: String,\n  // bin\n  proxy: String,\n  // 'install'\n  loglevel: String // everywhere\n\n};\n/**\n * nopt shorthands\n */\n\nproto.shorthands = {\n  release: '--no-debug',\n  C: '--directory',\n  debug: '--debug',\n  j: '--jobs',\n  silent: '--loglevel=silent',\n  silly: '--loglevel=silly',\n  verbose: '--loglevel=verbose'\n};\n/**\n * expose the command aliases for the bin file to use.\n */\n\nproto.aliases = aliases;\n/**\n * Parses the given argv array and sets the 'opts', 'argv',\n * 'command', and 'package_json' properties.\n */\n\nproto.parseArgv = function parseOpts(argv) {\n  this.opts = nopt(this.configDefs, this.shorthands, argv);\n  this.argv = this.opts.argv.remain.slice();\n  const commands = this.todo = []; // create a copy of the argv array with aliases mapped\n\n  argv = this.argv.map(arg => {\n    // is this an alias?\n    if (arg in this.aliases) {\n      arg = this.aliases[arg];\n    }\n\n    return arg;\n  }); // process the mapped args into \"command\" objects (\"name\" and \"args\" props)\n\n  argv.slice().forEach(arg => {\n    if (arg in this.commands) {\n      const args = argv.splice(0, argv.indexOf(arg));\n      argv.shift();\n\n      if (commands.length > 0) {\n        commands[commands.length - 1].args = args;\n      }\n\n      commands.push({\n        name: arg,\n        args: []\n      });\n    }\n  });\n\n  if (commands.length > 0) {\n    commands[commands.length - 1].args = argv.splice(0);\n  } // if a directory was specified package.json is assumed to be relative\n  // to it.\n\n\n  let package_json_path = this.package_json_path;\n\n  if (this.opts.directory) {\n    package_json_path = path.join(this.opts.directory, package_json_path);\n  }\n\n  this.package_json = JSON.parse(fs.readFileSync(package_json_path)); // expand commands entries for multiple napi builds\n\n  this.todo = napi.expand_commands(this.package_json, this.opts, commands); // support for inheriting config env variables from npm\n\n  const npm_config_prefix = 'npm_config_';\n  Object.keys(process.env).forEach(name => {\n    if (name.indexOf(npm_config_prefix) !== 0) return;\n    const val = process.env[name];\n\n    if (name === npm_config_prefix + 'loglevel') {\n      log.level = val;\n    } else {\n      // add the user-defined options to the config\n      name = name.substring(npm_config_prefix.length); // avoid npm argv clobber already present args\n      // which avoids problem of 'npm test' calling\n      // script that runs unique npm install commands\n\n      if (name === 'argv') {\n        if (this.opts.argv && this.opts.argv.remain && this.opts.argv.remain.length) {// do nothing\n        } else {\n          this.opts[name] = val;\n        }\n      } else {\n        this.opts[name] = val;\n      }\n    }\n  });\n\n  if (this.opts.loglevel) {\n    log.level = this.opts.loglevel;\n  }\n\n  log.resume();\n};\n/**\n * allow the binary.host property to be set at execution time.\n *\n * for this to take effect requires all the following to be true.\n * - binary is a property in package.json\n * - binary.host is falsey\n * - binary.staging_host is not empty\n * - binary.production_host is not empty\n *\n * if any of the previous checks fail then the function returns an empty string\n * and makes no changes to package.json's binary property.\n *\n *\n * if command is \"publish\" then the default is set to \"binary.staging_host\"\n * if command is not \"publish\" the the default is set to \"binary.production_host\"\n *\n * if the command-line option '--s3_host' is set to \"staging\" or \"production\" then\n * \"binary.host\" is set to the specified \"staging_host\" or \"production_host\". if\n * '--s3_host' is any other value an exception is thrown.\n *\n * if '--s3_host' is not present then \"binary.host\" is set to the default as above.\n *\n * this strategy was chosen so that any command other than \"publish\" or \"unpublish\" uses \"production\"\n * as the default without requiring any command-line options but that \"publish\" and \"unpublish\" require\n * '--s3_host production_host' to be specified in order to *really* publish (or unpublish). publishing\n * to staging can be done freely without worrying about disturbing any production releases.\n */\n\n\nproto.setBinaryHostProperty = function (command) {\n  if (this.binaryHostSet) {\n    return this.package_json.binary.host;\n  }\n\n  const p = this.package_json; // don't set anything if host is present. it must be left blank to trigger this.\n\n  if (!p || !p.binary || p.binary.host) {\n    return '';\n  } // and both staging and production must be present. errors will be reported later.\n\n\n  if (!p.binary.staging_host || !p.binary.production_host) {\n    return '';\n  }\n\n  let target = 'production_host';\n\n  if (command === 'publish' || command === 'unpublish') {\n    target = 'staging_host';\n  } // the environment variable has priority over the default or the command line. if\n  // either the env var or the command line option are invalid throw an error.\n\n\n  const npg_s3_host = process.env.node_pre_gyp_s3_host;\n\n  if (npg_s3_host === 'staging' || npg_s3_host === 'production') {\n    target = `${npg_s3_host}_host`;\n  } else if (this.opts['s3_host'] === 'staging' || this.opts['s3_host'] === 'production') {\n    target = `${this.opts['s3_host']}_host`;\n  } else if (this.opts['s3_host'] || npg_s3_host) {\n    throw new Error(`invalid s3_host ${this.opts['s3_host'] || npg_s3_host}`);\n  }\n\n  p.binary.host = p.binary[target];\n  this.binaryHostSet = true;\n  return p.binary.host;\n};\n/**\n * Returns the usage instructions for node-pre-gyp.\n */\n\n\nproto.usage = function usage() {\n  const str = ['', '  Usage: node-pre-gyp <command> [options]', '', '  where <command> is one of:', cli_commands.map(c => {\n    return '    - ' + c + ' - ' + require('./' + c).usage;\n  }).join('\\n'), '', 'node-pre-gyp@' + this.version + '  ' + path.resolve(__dirname, '..'), 'node@' + process.versions.node].join('\\n');\n  return str;\n};\n/**\n * Version number getter.\n */\n\n\nObject.defineProperty(proto, 'version', {\n  get: function () {\n    return this.package.version;\n  },\n  enumerable: true\n});","map":{"version":3,"sources":["C:/Users/ojaswi/Social - Media web app/frontend-react-app/node_modules/@mapbox/node-pre-gyp/lib/node-pre-gyp.js"],"names":["module","exports","mockS3Http","require","get_mockS3Http","mocking","fs","path","nopt","log","disableProgress","napi","EE","EventEmitter","inherits","cli_commands","aliases","heading","warn","process","env","node_pre_gyp_mock_s3","Object","defineProperty","get","find","enumerable","Run","package_json_path","argv","commands","self","forEach","command","argvx","callback","verbose","parseArgv","binaryHostSet","proto","prototype","package","configDefs","help","Boolean","arch","String","debug","directory","proxy","loglevel","shorthands","release","C","j","silent","silly","parseOpts","opts","remain","slice","todo","map","arg","args","splice","indexOf","shift","length","push","name","join","package_json","JSON","parse","readFileSync","expand_commands","npm_config_prefix","keys","val","level","substring","resume","setBinaryHostProperty","binary","host","p","staging_host","production_host","target","npg_s3_host","node_pre_gyp_s3_host","Error","usage","str","c","version","resolve","__dirname","versions","node"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * Module exports.\n */\n\nmodule.exports = exports;\n\n/**\n * Module dependencies.\n */\n\n// load mocking control function for accessing s3 via https. the function is a noop always returning\n// false if not mocking.\nexports.mockS3Http = require('./util/s3_setup').get_mockS3Http();\nexports.mockS3Http('on');\nconst mocking = exports.mockS3Http('get');\n\n\nconst fs = require('fs');\nconst path = require('path');\nconst nopt = require('nopt');\nconst log = require('npmlog');\nlog.disableProgress();\nconst napi = require('./util/napi.js');\n\nconst EE = require('events').EventEmitter;\nconst inherits = require('util').inherits;\nconst cli_commands = [\n  'clean',\n  'install',\n  'reinstall',\n  'build',\n  'rebuild',\n  'package',\n  'testpackage',\n  'publish',\n  'unpublish',\n  'info',\n  'testbinary',\n  'reveal',\n  'configure'\n];\nconst aliases = {};\n\n// differentiate node-pre-gyp's logs from npm's\nlog.heading = 'node-pre-gyp';\n\nif (mocking) {\n  log.warn(`mocking s3 to ${process.env.node_pre_gyp_mock_s3}`);\n}\n\n// this is a getter to avoid circular reference warnings with node v14.\nObject.defineProperty(exports, 'find', {\n  get: function() {\n    return require('./pre-binding').find;\n  },\n  enumerable: true\n});\n\n// in the following, \"my_module\" is using node-pre-gyp to\n// prebuild and install pre-built binaries. \"main_module\"\n// is using \"my_module\".\n//\n// \"bin/node-pre-gyp\" invokes Run() without a path. the\n// expectation is that the working directory is the package\n// root \"my_module\". this is true because in all cases npm is\n// executing a script in the context of \"my_module\".\n//\n// \"pre-binding.find()\" is executed by \"my_module\" but in the\n// context of \"main_module\". this is because \"main_module\" is\n// executing and requires \"my_module\" which is then executing\n// \"pre-binding.find()\" via \"node-pre-gyp.find()\", so the working\n// directory is that of \"main_module\".\n//\n// that's why \"find()\" must pass the path to package.json.\n//\nfunction Run({ package_json_path = './package.json', argv }) {\n  this.package_json_path = package_json_path;\n  this.commands = {};\n\n  const self = this;\n  cli_commands.forEach((command) => {\n    self.commands[command] = function(argvx, callback) {\n      log.verbose('command', command, argvx);\n      return require('./' + command)(self, argvx, callback);\n    };\n  });\n\n  this.parseArgv(argv);\n\n  // this is set to true after the binary.host property was set to\n  // either staging_host or production_host.\n  this.binaryHostSet = false;\n}\ninherits(Run, EE);\nexports.Run = Run;\nconst proto = Run.prototype;\n\n/**\n * Export the contents of the package.json.\n */\n\nproto.package = require('../package.json');\n\n/**\n * nopt configuration definitions\n */\n\nproto.configDefs = {\n  help: Boolean,     // everywhere\n  arch: String,      // 'configure'\n  debug: Boolean,    // 'build'\n  directory: String, // bin\n  proxy: String,     // 'install'\n  loglevel: String  // everywhere\n};\n\n/**\n * nopt shorthands\n */\n\nproto.shorthands = {\n  release: '--no-debug',\n  C: '--directory',\n  debug: '--debug',\n  j: '--jobs',\n  silent: '--loglevel=silent',\n  silly: '--loglevel=silly',\n  verbose: '--loglevel=verbose'\n};\n\n/**\n * expose the command aliases for the bin file to use.\n */\n\nproto.aliases = aliases;\n\n/**\n * Parses the given argv array and sets the 'opts', 'argv',\n * 'command', and 'package_json' properties.\n */\n\nproto.parseArgv = function parseOpts(argv) {\n  this.opts = nopt(this.configDefs, this.shorthands, argv);\n  this.argv = this.opts.argv.remain.slice();\n  const commands = this.todo = [];\n\n  // create a copy of the argv array with aliases mapped\n  argv = this.argv.map((arg) => {\n    // is this an alias?\n    if (arg in this.aliases) {\n      arg = this.aliases[arg];\n    }\n    return arg;\n  });\n\n  // process the mapped args into \"command\" objects (\"name\" and \"args\" props)\n  argv.slice().forEach((arg) => {\n    if (arg in this.commands) {\n      const args = argv.splice(0, argv.indexOf(arg));\n      argv.shift();\n      if (commands.length > 0) {\n        commands[commands.length - 1].args = args;\n      }\n      commands.push({ name: arg, args: [] });\n    }\n  });\n  if (commands.length > 0) {\n    commands[commands.length - 1].args = argv.splice(0);\n  }\n\n\n  // if a directory was specified package.json is assumed to be relative\n  // to it.\n  let package_json_path = this.package_json_path;\n  if (this.opts.directory) {\n    package_json_path = path.join(this.opts.directory, package_json_path);\n  }\n\n  this.package_json = JSON.parse(fs.readFileSync(package_json_path));\n\n  // expand commands entries for multiple napi builds\n  this.todo = napi.expand_commands(this.package_json, this.opts, commands);\n\n  // support for inheriting config env variables from npm\n  const npm_config_prefix = 'npm_config_';\n  Object.keys(process.env).forEach((name) => {\n    if (name.indexOf(npm_config_prefix) !== 0) return;\n    const val = process.env[name];\n    if (name === npm_config_prefix + 'loglevel') {\n      log.level = val;\n    } else {\n      // add the user-defined options to the config\n      name = name.substring(npm_config_prefix.length);\n      // avoid npm argv clobber already present args\n      // which avoids problem of 'npm test' calling\n      // script that runs unique npm install commands\n      if (name === 'argv') {\n        if (this.opts.argv &&\n             this.opts.argv.remain &&\n             this.opts.argv.remain.length) {\n          // do nothing\n        } else {\n          this.opts[name] = val;\n        }\n      } else {\n        this.opts[name] = val;\n      }\n    }\n  });\n\n  if (this.opts.loglevel) {\n    log.level = this.opts.loglevel;\n  }\n  log.resume();\n};\n\n/**\n * allow the binary.host property to be set at execution time.\n *\n * for this to take effect requires all the following to be true.\n * - binary is a property in package.json\n * - binary.host is falsey\n * - binary.staging_host is not empty\n * - binary.production_host is not empty\n *\n * if any of the previous checks fail then the function returns an empty string\n * and makes no changes to package.json's binary property.\n *\n *\n * if command is \"publish\" then the default is set to \"binary.staging_host\"\n * if command is not \"publish\" the the default is set to \"binary.production_host\"\n *\n * if the command-line option '--s3_host' is set to \"staging\" or \"production\" then\n * \"binary.host\" is set to the specified \"staging_host\" or \"production_host\". if\n * '--s3_host' is any other value an exception is thrown.\n *\n * if '--s3_host' is not present then \"binary.host\" is set to the default as above.\n *\n * this strategy was chosen so that any command other than \"publish\" or \"unpublish\" uses \"production\"\n * as the default without requiring any command-line options but that \"publish\" and \"unpublish\" require\n * '--s3_host production_host' to be specified in order to *really* publish (or unpublish). publishing\n * to staging can be done freely without worrying about disturbing any production releases.\n */\nproto.setBinaryHostProperty = function(command) {\n  if (this.binaryHostSet) {\n    return this.package_json.binary.host;\n  }\n  const p = this.package_json;\n  // don't set anything if host is present. it must be left blank to trigger this.\n  if (!p || !p.binary || p.binary.host) {\n    return '';\n  }\n  // and both staging and production must be present. errors will be reported later.\n  if (!p.binary.staging_host || !p.binary.production_host) {\n    return '';\n  }\n  let target = 'production_host';\n  if (command === 'publish' || command === 'unpublish') {\n    target = 'staging_host';\n  }\n  // the environment variable has priority over the default or the command line. if\n  // either the env var or the command line option are invalid throw an error.\n  const npg_s3_host = process.env.node_pre_gyp_s3_host;\n  if (npg_s3_host === 'staging' || npg_s3_host === 'production') {\n    target = `${npg_s3_host}_host`;\n  } else if (this.opts['s3_host'] === 'staging' || this.opts['s3_host'] === 'production') {\n    target = `${this.opts['s3_host']}_host`;\n  } else if (this.opts['s3_host'] || npg_s3_host) {\n    throw new Error(`invalid s3_host ${this.opts['s3_host'] || npg_s3_host}`);\n  }\n\n  p.binary.host = p.binary[target];\n  this.binaryHostSet = true;\n\n  return p.binary.host;\n};\n\n/**\n * Returns the usage instructions for node-pre-gyp.\n */\n\nproto.usage = function usage() {\n  const str = [\n    '',\n    '  Usage: node-pre-gyp <command> [options]',\n    '',\n    '  where <command> is one of:',\n    cli_commands.map((c) => {\n      return '    - ' + c + ' - ' + require('./' + c).usage;\n    }).join('\\n'),\n    '',\n    'node-pre-gyp@' + this.version + '  ' + path.resolve(__dirname, '..'),\n    'node@' + process.versions.node\n  ].join('\\n');\n  return str;\n};\n\n/**\n * Version number getter.\n */\n\nObject.defineProperty(proto, 'version', {\n  get: function() {\n    return this.package.version;\n  },\n  enumerable: true\n});\n"]},"metadata":{},"sourceType":"script"}