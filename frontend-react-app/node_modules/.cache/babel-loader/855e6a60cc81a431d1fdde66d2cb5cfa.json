{"ast":null,"code":"'use strict';\n\nmodule.exports = exports;\n\nconst url = require('url');\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nmodule.exports.detect = function (opts, config) {\n  const to = opts.hosted_path;\n  const uri = url.parse(to);\n  config.prefix = !uri.pathname || uri.pathname === '/' ? '' : uri.pathname.replace('/', '');\n\n  if (opts.bucket && opts.region) {\n    config.bucket = opts.bucket;\n    config.region = opts.region;\n    config.endpoint = opts.host;\n    config.s3ForcePathStyle = opts.s3ForcePathStyle;\n  } else {\n    const parts = uri.hostname.split('.s3');\n    const bucket = parts[0];\n\n    if (!bucket) {\n      return;\n    }\n\n    if (!config.bucket) {\n      config.bucket = bucket;\n    }\n\n    if (!config.region) {\n      const region = parts[1].slice(1).split('.')[0];\n\n      if (region === 'amazonaws') {\n        config.region = 'us-east-1';\n      } else {\n        config.region = region;\n      }\n    }\n  }\n};\n\nmodule.exports.get_s3 = function (config) {\n  if (process.env.node_pre_gyp_mock_s3) {\n    // here we're mocking. node_pre_gyp_mock_s3 is the scratch directory\n    // for the mock code.\n    const AWSMock = require('mock-aws-s3');\n\n    const os = require('os');\n\n    AWSMock.config.basePath = `${os.tmpdir()}/mock`;\n    const s3 = AWSMock.S3(); // wrapped callback maker. fs calls return code of ENOENT but AWS.S3 returns\n    // NotFound.\n\n    const wcb = fn => function (err) {\n      if (err && err.code === 'ENOENT') {\n        err.code = 'NotFound';\n      }\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return fn(err, ...args);\n    };\n\n    return {\n      listObjects(params, callback) {\n        return s3.listObjects(params, wcb(callback));\n      },\n\n      headObject(params, callback) {\n        return s3.headObject(params, wcb(callback));\n      },\n\n      deleteObject(params, callback) {\n        return s3.deleteObject(params, wcb(callback));\n      },\n\n      putObject(params, callback) {\n        return s3.putObject(params, wcb(callback));\n      }\n\n    };\n  } // if not mocking then setup real s3.\n\n\n  const AWS = require('aws-sdk');\n\n  AWS.config.update(config);\n  const s3 = new AWS.S3(); // need to change if additional options need to be specified.\n\n  return {\n    listObjects(params, callback) {\n      return s3.listObjects(params, callback);\n    },\n\n    headObject(params, callback) {\n      return s3.headObject(params, callback);\n    },\n\n    deleteObject(params, callback) {\n      return s3.deleteObject(params, callback);\n    },\n\n    putObject(params, callback) {\n      return s3.putObject(params, callback);\n    }\n\n  };\n}; //\n// function to get the mocking control function. if not mocking it returns a no-op.\n//\n// if mocking it sets up the mock http interceptors that use the mocked s3 file system\n// to fulfill reponses.\n\n\nmodule.exports.get_mockS3Http = function () {\n  let mock_s3 = false;\n\n  if (!process.env.node_pre_gyp_mock_s3) {\n    return () => mock_s3;\n  }\n\n  const nock = require('nock'); // the bucket used for testing, as addressed by https.\n\n\n  const host = 'https://mapbox-node-pre-gyp-public-testing-bucket.s3.us-east-1.amazonaws.com';\n  const mockDir = process.env.node_pre_gyp_mock_s3 + '/mapbox-node-pre-gyp-public-testing-bucket'; // function to setup interceptors. they are \"turned off\" by setting mock_s3 to false.\n\n  const mock_http = () => {\n    // eslint-disable-next-line no-unused-vars\n    function get(uri, requestBody) {\n      const filepath = path.join(mockDir, uri.replace('%2B', '+'));\n\n      try {\n        fs.accessSync(filepath, fs.constants.R_OK);\n      } catch (e) {\n        return [404, 'not found\\n'];\n      } // the mock s3 functions just write to disk, so just read from it.\n\n\n      return [200, fs.createReadStream(filepath)];\n    } // eslint-disable-next-line no-unused-vars\n\n\n    return nock(host).persist().get(() => mock_s3) // mock any uri for s3 when true\n    .reply(get);\n  }; // setup interceptors. they check the mock_s3 flag to determine whether to intercept.\n\n\n  mock_http(nock, host, mockDir); // function to turn matching all requests to s3 on/off.\n\n  const mockS3Http = action => {\n    const previous = mock_s3;\n\n    if (action === 'off') {\n      mock_s3 = false;\n    } else if (action === 'on') {\n      mock_s3 = true;\n    } else if (action !== 'get') {\n      throw new Error(`illegal action for setMockHttp ${action}`);\n    }\n\n    return previous;\n  }; // call mockS3Http with the argument\n  // - 'on' - turn it on\n  // - 'off' - turn it off (used by fetch.test.js so it doesn't interfere with redirects)\n  // - 'get' - return true or false for 'on' or 'off'\n\n\n  return mockS3Http;\n};","map":{"version":3,"sources":["C:/Users/ojaswi/Social - Media web app/frontend-react-app/node_modules/@mapbox/node-pre-gyp/lib/util/s3_setup.js"],"names":["module","exports","url","require","fs","path","detect","opts","config","to","hosted_path","uri","parse","prefix","pathname","replace","bucket","region","endpoint","host","s3ForcePathStyle","parts","hostname","split","slice","get_s3","process","env","node_pre_gyp_mock_s3","AWSMock","os","basePath","tmpdir","s3","S3","wcb","fn","err","code","args","listObjects","params","callback","headObject","deleteObject","putObject","AWS","update","get_mockS3Http","mock_s3","nock","mockDir","mock_http","get","requestBody","filepath","join","accessSync","constants","R_OK","e","createReadStream","persist","reply","mockS3Http","action","previous","Error"],"mappings":"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","sourcesContent":["'use strict';\n\nmodule.exports = exports;\n\nconst url = require('url');\nconst fs = require('fs');\nconst path = require('path');\n\nmodule.exports.detect = function(opts, config) {\n  const to = opts.hosted_path;\n  const uri = url.parse(to);\n  config.prefix = (!uri.pathname || uri.pathname === '/') ? '' : uri.pathname.replace('/', '');\n  if (opts.bucket && opts.region) {\n    config.bucket = opts.bucket;\n    config.region = opts.region;\n    config.endpoint = opts.host;\n    config.s3ForcePathStyle = opts.s3ForcePathStyle;\n  } else {\n    const parts = uri.hostname.split('.s3');\n    const bucket = parts[0];\n    if (!bucket) {\n      return;\n    }\n    if (!config.bucket) {\n      config.bucket = bucket;\n    }\n    if (!config.region) {\n      const region = parts[1].slice(1).split('.')[0];\n      if (region === 'amazonaws') {\n        config.region = 'us-east-1';\n      } else {\n        config.region = region;\n      }\n    }\n  }\n};\n\nmodule.exports.get_s3 = function(config) {\n\n  if (process.env.node_pre_gyp_mock_s3) {\n    // here we're mocking. node_pre_gyp_mock_s3 is the scratch directory\n    // for the mock code.\n    const AWSMock = require('mock-aws-s3');\n    const os = require('os');\n\n    AWSMock.config.basePath = `${os.tmpdir()}/mock`;\n\n    const s3 = AWSMock.S3();\n\n    // wrapped callback maker. fs calls return code of ENOENT but AWS.S3 returns\n    // NotFound.\n    const wcb = (fn) => (err, ...args) => {\n      if (err && err.code === 'ENOENT') {\n        err.code = 'NotFound';\n      }\n      return fn(err, ...args);\n    };\n\n    return {\n      listObjects(params, callback) {\n        return s3.listObjects(params, wcb(callback));\n      },\n      headObject(params, callback) {\n        return s3.headObject(params, wcb(callback));\n      },\n      deleteObject(params, callback) {\n        return s3.deleteObject(params, wcb(callback));\n      },\n      putObject(params, callback) {\n        return s3.putObject(params, wcb(callback));\n      }\n    };\n  }\n\n  // if not mocking then setup real s3.\n  const AWS = require('aws-sdk');\n\n  AWS.config.update(config);\n  const s3 = new AWS.S3();\n\n  // need to change if additional options need to be specified.\n  return {\n    listObjects(params, callback) {\n      return s3.listObjects(params, callback);\n    },\n    headObject(params, callback) {\n      return s3.headObject(params, callback);\n    },\n    deleteObject(params, callback) {\n      return s3.deleteObject(params, callback);\n    },\n    putObject(params, callback) {\n      return s3.putObject(params, callback);\n    }\n  };\n\n\n\n};\n\n//\n// function to get the mocking control function. if not mocking it returns a no-op.\n//\n// if mocking it sets up the mock http interceptors that use the mocked s3 file system\n// to fulfill reponses.\nmodule.exports.get_mockS3Http = function() {\n  let mock_s3 = false;\n  if (!process.env.node_pre_gyp_mock_s3) {\n    return () => mock_s3;\n  }\n\n  const nock = require('nock');\n  // the bucket used for testing, as addressed by https.\n  const host = 'https://mapbox-node-pre-gyp-public-testing-bucket.s3.us-east-1.amazonaws.com';\n  const mockDir = process.env.node_pre_gyp_mock_s3 + '/mapbox-node-pre-gyp-public-testing-bucket';\n\n  // function to setup interceptors. they are \"turned off\" by setting mock_s3 to false.\n  const mock_http = () => {\n    // eslint-disable-next-line no-unused-vars\n    function get(uri, requestBody) {\n      const filepath = path.join(mockDir, uri.replace('%2B', '+'));\n\n      try {\n        fs.accessSync(filepath, fs.constants.R_OK);\n      } catch (e) {\n        return [404, 'not found\\n'];\n      }\n\n      // the mock s3 functions just write to disk, so just read from it.\n      return [200, fs.createReadStream(filepath)];\n    }\n\n    // eslint-disable-next-line no-unused-vars\n    return nock(host)\n      .persist()\n      .get(() => mock_s3) // mock any uri for s3 when true\n      .reply(get);\n  };\n\n  // setup interceptors. they check the mock_s3 flag to determine whether to intercept.\n  mock_http(nock, host, mockDir);\n  // function to turn matching all requests to s3 on/off.\n  const mockS3Http = (action) => {\n    const previous = mock_s3;\n    if (action === 'off') {\n      mock_s3 = false;\n    } else if (action === 'on') {\n      mock_s3 = true;\n    } else if (action !== 'get') {\n      throw new Error(`illegal action for setMockHttp ${action}`);\n    }\n    return previous;\n  };\n\n  // call mockS3Http with the argument\n  // - 'on' - turn it on\n  // - 'off' - turn it off (used by fetch.test.js so it doesn't interfere with redirects)\n  // - 'get' - return true or false for 'on' or 'off'\n  return mockS3Http;\n};\n\n\n\n"]},"metadata":{},"sourceType":"script"}