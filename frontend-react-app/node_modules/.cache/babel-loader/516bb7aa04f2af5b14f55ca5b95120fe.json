{"ast":null,"code":"'use strict';\n\nmodule.exports = exports = configure;\nexports.usage = 'Attempts to configure node-gyp or nw-gyp build';\n\nconst napi = require('./util/napi.js');\n\nconst compile = require('./util/compile.js');\n\nconst handle_gyp_opts = require('./util/handle_gyp_opts.js');\n\nfunction configure(gyp, argv, callback) {\n  handle_gyp_opts(gyp, argv, (err, result) => {\n    let final_args = result.gyp.concat(result.pre); // pull select node-gyp configure options out of the npm environ\n\n    const known_gyp_args = ['dist-url', 'python', 'nodedir', 'msvs_version'];\n    known_gyp_args.forEach(key => {\n      const val = gyp.opts[key] || gyp.opts[key.replace('-', '_')];\n\n      if (val) {\n        final_args.push('--' + key + '=' + val);\n      }\n    }); // --ensure=false tell node-gyp to re-install node development headers\n    // but it is only respected by node-gyp install, so we have to call install\n    // as a separate step if the user passes it\n\n    if (gyp.opts.ensure === false) {\n      const install_args = final_args.concat(['install', '--ensure=false']);\n      compile.run_gyp(install_args, result.opts, err2 => {\n        if (err2) return callback(err2);\n\n        if (result.unparsed.length > 0) {\n          final_args = final_args.concat(['--']).concat(result.unparsed);\n        }\n\n        compile.run_gyp(['configure'].concat(final_args), result.opts, err3 => {\n          return callback(err3);\n        });\n      });\n    } else {\n      if (result.unparsed.length > 0) {\n        final_args = final_args.concat(['--']).concat(result.unparsed);\n      }\n\n      compile.run_gyp(['configure'].concat(final_args), result.opts, err4 => {\n        if (!err4 && result.opts.napi_build_version) {\n          napi.swap_build_dir_out(result.opts.napi_build_version);\n        }\n\n        return callback(err4);\n      });\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/ojaswi/Social - Media web app/frontend-react-app/node_modules/@mapbox/node-pre-gyp/lib/configure.js"],"names":["module","exports","configure","usage","napi","require","compile","handle_gyp_opts","gyp","argv","callback","err","result","final_args","concat","pre","known_gyp_args","forEach","key","val","opts","replace","push","ensure","install_args","run_gyp","err2","unparsed","length","err3","err4","napi_build_version","swap_build_dir_out"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBA,OAAO,GAAGC,SAA3B;AAEAD,OAAO,CAACE,KAAR,GAAgB,gDAAhB;;AAEA,MAAMC,IAAI,GAAGC,OAAO,CAAC,gBAAD,CAApB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,mBAAD,CAAvB;;AACA,MAAME,eAAe,GAAGF,OAAO,CAAC,2BAAD,CAA/B;;AAEA,SAASH,SAAT,CAAmBM,GAAnB,EAAwBC,IAAxB,EAA8BC,QAA9B,EAAwC;AACtCH,EAAAA,eAAe,CAACC,GAAD,EAAMC,IAAN,EAAY,CAACE,GAAD,EAAMC,MAAN,KAAiB;AAC1C,QAAIC,UAAU,GAAGD,MAAM,CAACJ,GAAP,CAAWM,MAAX,CAAkBF,MAAM,CAACG,GAAzB,CAAjB,CAD0C,CAE1C;;AACA,UAAMC,cAAc,GAAG,CAAC,UAAD,EAAa,QAAb,EAAuB,SAAvB,EAAkC,cAAlC,CAAvB;AACAA,IAAAA,cAAc,CAACC,OAAf,CAAwBC,GAAD,IAAS;AAC9B,YAAMC,GAAG,GAAGX,GAAG,CAACY,IAAJ,CAASF,GAAT,KAAiBV,GAAG,CAACY,IAAJ,CAASF,GAAG,CAACG,OAAJ,CAAY,GAAZ,EAAiB,GAAjB,CAAT,CAA7B;;AACA,UAAIF,GAAJ,EAAS;AACPN,QAAAA,UAAU,CAACS,IAAX,CAAgB,OAAOJ,GAAP,GAAa,GAAb,GAAmBC,GAAnC;AACD;AACF,KALD,EAJ0C,CAU1C;AACA;AACA;;AACA,QAAIX,GAAG,CAACY,IAAJ,CAASG,MAAT,KAAoB,KAAxB,EAA+B;AAC7B,YAAMC,YAAY,GAAGX,UAAU,CAACC,MAAX,CAAkB,CAAC,SAAD,EAAY,gBAAZ,CAAlB,CAArB;AACAR,MAAAA,OAAO,CAACmB,OAAR,CAAgBD,YAAhB,EAA8BZ,MAAM,CAACQ,IAArC,EAA4CM,IAAD,IAAU;AACnD,YAAIA,IAAJ,EAAU,OAAOhB,QAAQ,CAACgB,IAAD,CAAf;;AACV,YAAId,MAAM,CAACe,QAAP,CAAgBC,MAAhB,GAAyB,CAA7B,EAAgC;AAC9Bf,UAAAA,UAAU,GAAGA,UAAU,CACrBC,MADW,CACJ,CAAC,IAAD,CADI,EAEXA,MAFW,CAEJF,MAAM,CAACe,QAFH,CAAb;AAGD;;AACDrB,QAAAA,OAAO,CAACmB,OAAR,CAAgB,CAAC,WAAD,EAAcX,MAAd,CAAqBD,UAArB,CAAhB,EAAkDD,MAAM,CAACQ,IAAzD,EAAgES,IAAD,IAAU;AACvE,iBAAOnB,QAAQ,CAACmB,IAAD,CAAf;AACD,SAFD;AAGD,OAVD;AAWD,KAbD,MAaO;AACL,UAAIjB,MAAM,CAACe,QAAP,CAAgBC,MAAhB,GAAyB,CAA7B,EAAgC;AAC9Bf,QAAAA,UAAU,GAAGA,UAAU,CACrBC,MADW,CACJ,CAAC,IAAD,CADI,EAEXA,MAFW,CAEJF,MAAM,CAACe,QAFH,CAAb;AAGD;;AACDrB,MAAAA,OAAO,CAACmB,OAAR,CAAgB,CAAC,WAAD,EAAcX,MAAd,CAAqBD,UAArB,CAAhB,EAAkDD,MAAM,CAACQ,IAAzD,EAAgEU,IAAD,IAAU;AACvE,YAAI,CAACA,IAAD,IAASlB,MAAM,CAACQ,IAAP,CAAYW,kBAAzB,EAA6C;AAC3C3B,UAAAA,IAAI,CAAC4B,kBAAL,CAAwBpB,MAAM,CAACQ,IAAP,CAAYW,kBAApC;AACD;;AACD,eAAOrB,QAAQ,CAACoB,IAAD,CAAf;AACD,OALD;AAMD;AACF,GAvCc,CAAf;AAwCD","sourcesContent":["'use strict';\n\nmodule.exports = exports = configure;\n\nexports.usage = 'Attempts to configure node-gyp or nw-gyp build';\n\nconst napi = require('./util/napi.js');\nconst compile = require('./util/compile.js');\nconst handle_gyp_opts = require('./util/handle_gyp_opts.js');\n\nfunction configure(gyp, argv, callback) {\n  handle_gyp_opts(gyp, argv, (err, result) => {\n    let final_args = result.gyp.concat(result.pre);\n    // pull select node-gyp configure options out of the npm environ\n    const known_gyp_args = ['dist-url', 'python', 'nodedir', 'msvs_version'];\n    known_gyp_args.forEach((key) => {\n      const val = gyp.opts[key] || gyp.opts[key.replace('-', '_')];\n      if (val) {\n        final_args.push('--' + key + '=' + val);\n      }\n    });\n    // --ensure=false tell node-gyp to re-install node development headers\n    // but it is only respected by node-gyp install, so we have to call install\n    // as a separate step if the user passes it\n    if (gyp.opts.ensure === false) {\n      const install_args = final_args.concat(['install', '--ensure=false']);\n      compile.run_gyp(install_args, result.opts, (err2) => {\n        if (err2) return callback(err2);\n        if (result.unparsed.length > 0) {\n          final_args = final_args.\n            concat(['--']).\n            concat(result.unparsed);\n        }\n        compile.run_gyp(['configure'].concat(final_args), result.opts, (err3) => {\n          return callback(err3);\n        });\n      });\n    } else {\n      if (result.unparsed.length > 0) {\n        final_args = final_args.\n          concat(['--']).\n          concat(result.unparsed);\n      }\n      compile.run_gyp(['configure'].concat(final_args), result.opts, (err4) => {\n        if (!err4 && result.opts.napi_build_version) {\n          napi.swap_build_dir_out(result.opts.napi_build_version);\n        }\n        return callback(err4);\n      });\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"script"}