{"ast":null,"code":"'use strict';\n\nmodule.exports = exports = publish;\nexports.usage = 'Publishes pre-built binary (requires aws-sdk)';\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst log = require('npmlog');\n\nconst versioning = require('./util/versioning.js');\n\nconst napi = require('./util/napi.js');\n\nconst s3_setup = require('./util/s3_setup.js');\n\nconst existsAsync = fs.exists || path.exists;\n\nconst url = require('url');\n\nfunction publish(gyp, argv, callback) {\n  const package_json = gyp.package_json;\n  const napi_build_version = napi.get_napi_build_version_from_command_args(argv);\n  const opts = versioning.evaluate(package_json, gyp.opts, napi_build_version);\n  const tarball = opts.staged_tarball;\n  existsAsync(tarball, found => {\n    if (!found) {\n      return callback(new Error('Cannot publish because ' + tarball + ' missing: run `node-pre-gyp package` first'));\n    }\n\n    log.info('publish', 'Detecting s3 credentials');\n    const config = {};\n    s3_setup.detect(opts, config);\n    const s3 = s3_setup.get_s3(config);\n    const key_name = url.resolve(config.prefix, opts.package_name);\n    const s3_opts = {\n      Bucket: config.bucket,\n      Key: key_name\n    };\n    log.info('publish', 'Authenticating with s3');\n    log.info('publish', config);\n    log.info('publish', 'Checking for existing binary at ' + opts.hosted_path);\n    s3.headObject(s3_opts, (err, meta) => {\n      if (meta) log.info('publish', JSON.stringify(meta));\n\n      if (err && err.code === 'NotFound') {\n        // we are safe to publish because\n        // the object does not already exist\n        log.info('publish', 'Preparing to put object');\n        const s3_put_opts = {\n          ACL: 'public-read',\n          Body: fs.createReadStream(tarball),\n          Key: key_name,\n          Bucket: config.bucket\n        };\n        log.info('publish', 'Putting object', s3_put_opts.ACL, s3_put_opts.Bucket, s3_put_opts.Key);\n\n        try {\n          s3.putObject(s3_put_opts, (err2, resp) => {\n            log.info('publish', 'returned from putting object');\n\n            if (err2) {\n              log.info('publish', 's3 putObject error: \"' + err2 + '\"');\n              return callback(err2);\n            }\n\n            if (resp) log.info('publish', 's3 putObject response: \"' + JSON.stringify(resp) + '\"');\n            log.info('publish', 'successfully put object');\n            console.log('[' + package_json.name + '] published to ' + opts.hosted_path);\n            return callback();\n          });\n        } catch (err3) {\n          log.info('publish', 's3 putObject error: \"' + err3 + '\"');\n          return callback(err3);\n        }\n      } else if (err) {\n        log.info('publish', 's3 headObject error: \"' + err + '\"');\n        return callback(err);\n      } else {\n        log.error('publish', 'Cannot publish over existing version');\n        log.error('publish', \"Update the 'version' field in package.json and try again\");\n        log.error('publish', 'If the previous version was published in error see:');\n        log.error('publish', '\\t node-pre-gyp unpublish');\n        return callback(new Error('Failed publishing to ' + opts.hosted_path));\n      }\n    });\n  });\n}","map":{"version":3,"sources":["C:/Users/ojaswi/Social - Media web app/frontend-react-app/node_modules/@mapbox/node-pre-gyp/lib/publish.js"],"names":["module","exports","publish","usage","fs","require","path","log","versioning","napi","s3_setup","existsAsync","exists","url","gyp","argv","callback","package_json","napi_build_version","get_napi_build_version_from_command_args","opts","evaluate","tarball","staged_tarball","found","Error","info","config","detect","s3","get_s3","key_name","resolve","prefix","package_name","s3_opts","Bucket","bucket","Key","hosted_path","headObject","err","meta","JSON","stringify","code","s3_put_opts","ACL","Body","createReadStream","putObject","err2","resp","console","name","err3","error"],"mappings":"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","sourcesContent":["'use strict';\n\nmodule.exports = exports = publish;\n\nexports.usage = 'Publishes pre-built binary (requires aws-sdk)';\n\nconst fs = require('fs');\nconst path = require('path');\nconst log = require('npmlog');\nconst versioning = require('./util/versioning.js');\nconst napi = require('./util/napi.js');\nconst s3_setup = require('./util/s3_setup.js');\nconst existsAsync = fs.exists || path.exists;\nconst url = require('url');\n\nfunction publish(gyp, argv, callback) {\n  const package_json = gyp.package_json;\n  const napi_build_version = napi.get_napi_build_version_from_command_args(argv);\n  const opts = versioning.evaluate(package_json, gyp.opts, napi_build_version);\n  const tarball = opts.staged_tarball;\n  existsAsync(tarball, (found) => {\n    if (!found) {\n      return callback(new Error('Cannot publish because ' + tarball + ' missing: run `node-pre-gyp package` first'));\n    }\n\n    log.info('publish', 'Detecting s3 credentials');\n    const config = {};\n    s3_setup.detect(opts, config);\n    const s3 = s3_setup.get_s3(config);\n\n    const key_name = url.resolve(config.prefix, opts.package_name);\n    const s3_opts = {\n      Bucket: config.bucket,\n      Key: key_name\n    };\n    log.info('publish', 'Authenticating with s3');\n    log.info('publish', config);\n\n    log.info('publish', 'Checking for existing binary at ' + opts.hosted_path);\n    s3.headObject(s3_opts, (err, meta) => {\n      if (meta) log.info('publish', JSON.stringify(meta));\n      if (err && err.code === 'NotFound') {\n        // we are safe to publish because\n        // the object does not already exist\n        log.info('publish', 'Preparing to put object');\n        const s3_put_opts = {\n          ACL: 'public-read',\n          Body: fs.createReadStream(tarball),\n          Key: key_name,\n          Bucket: config.bucket\n        };\n        log.info('publish', 'Putting object', s3_put_opts.ACL, s3_put_opts.Bucket, s3_put_opts.Key);\n        try {\n          s3.putObject(s3_put_opts, (err2, resp) => {\n            log.info('publish', 'returned from putting object');\n            if (err2) {\n              log.info('publish', 's3 putObject error: \"' + err2 + '\"');\n              return callback(err2);\n            }\n            if (resp) log.info('publish', 's3 putObject response: \"' + JSON.stringify(resp) + '\"');\n            log.info('publish', 'successfully put object');\n            console.log('[' + package_json.name + '] published to ' + opts.hosted_path);\n            return callback();\n          });\n        } catch (err3) {\n          log.info('publish', 's3 putObject error: \"' + err3 + '\"');\n          return callback(err3);\n        }\n      } else if (err) {\n        log.info('publish', 's3 headObject error: \"' + err + '\"');\n        return callback(err);\n      } else {\n        log.error('publish', 'Cannot publish over existing version');\n        log.error('publish', \"Update the 'version' field in package.json and try again\");\n        log.error('publish', 'If the previous version was published in error see:');\n        log.error('publish', '\\t node-pre-gyp unpublish');\n        return callback(new Error('Failed publishing to ' + opts.hosted_path));\n      }\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"script"}