{"ast":null,"code":"'use strict';\n\nvar stringWidth = require('string-width');\n\nexports.center = alignCenter;\nexports.left = alignLeft;\nexports.right = alignRight; // lodash's way of generating pad characters.\n\nfunction createPadding(width) {\n  var result = '';\n  var string = ' ';\n  var n = width;\n\n  do {\n    if (n % 2) {\n      result += string;\n    }\n\n    n = Math.floor(n / 2);\n    string += string;\n  } while (n);\n\n  return result;\n}\n\nfunction alignLeft(str, width) {\n  var trimmed = str.trimRight();\n  if (trimmed.length === 0 && str.length >= width) return str;\n  var padding = '';\n  var strWidth = stringWidth(trimmed);\n\n  if (strWidth < width) {\n    padding = createPadding(width - strWidth);\n  }\n\n  return trimmed + padding;\n}\n\nfunction alignRight(str, width) {\n  var trimmed = str.trimLeft();\n  if (trimmed.length === 0 && str.length >= width) return str;\n  var padding = '';\n  var strWidth = stringWidth(trimmed);\n\n  if (strWidth < width) {\n    padding = createPadding(width - strWidth);\n  }\n\n  return padding + trimmed;\n}\n\nfunction alignCenter(str, width) {\n  var trimmed = str.trim();\n  if (trimmed.length === 0 && str.length >= width) return str;\n  var padLeft = '';\n  var padRight = '';\n  var strWidth = stringWidth(trimmed);\n\n  if (strWidth < width) {\n    var padLeftBy = parseInt((width - strWidth) / 2, 10);\n    padLeft = createPadding(padLeftBy);\n    padRight = createPadding(width - (strWidth + padLeftBy));\n  }\n\n  return padLeft + trimmed + padRight;\n}","map":{"version":3,"sources":["C:/Users/ojaswi/Social - Media web app/frontend-react-app/node_modules/wide-align/align.js"],"names":["stringWidth","require","exports","center","alignCenter","left","alignLeft","right","alignRight","createPadding","width","result","string","n","Math","floor","str","trimmed","trimRight","length","padding","strWidth","trimLeft","trim","padLeft","padRight","padLeftBy","parseInt"],"mappings":"AAAA;;AACA,IAAIA,WAAW,GAAGC,OAAO,CAAC,cAAD,CAAzB;;AAEAC,OAAO,CAACC,MAAR,GAAiBC,WAAjB;AACAF,OAAO,CAACG,IAAR,GAAeC,SAAf;AACAJ,OAAO,CAACK,KAAR,GAAgBC,UAAhB,C,CAEA;;AAEA,SAASC,aAAT,CAAwBC,KAAxB,EAA+B;AAC7B,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,MAAM,GAAG,GAAb;AACA,MAAIC,CAAC,GAAGH,KAAR;;AACA,KAAG;AACD,QAAIG,CAAC,GAAG,CAAR,EAAW;AACTF,MAAAA,MAAM,IAAIC,MAAV;AACD;;AACDC,IAAAA,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWF,CAAC,GAAG,CAAf,CAAJ;AACAD,IAAAA,MAAM,IAAIA,MAAV;AACD,GAND,QAMSC,CANT;;AAQA,SAAOF,MAAP;AACD;;AAED,SAASL,SAAT,CAAoBU,GAApB,EAAyBN,KAAzB,EAAgC;AAC9B,MAAIO,OAAO,GAAGD,GAAG,CAACE,SAAJ,EAAd;AACA,MAAID,OAAO,CAACE,MAAR,KAAmB,CAAnB,IAAwBH,GAAG,CAACG,MAAJ,IAAcT,KAA1C,EAAiD,OAAOM,GAAP;AACjD,MAAII,OAAO,GAAG,EAAd;AACA,MAAIC,QAAQ,GAAGrB,WAAW,CAACiB,OAAD,CAA1B;;AAEA,MAAII,QAAQ,GAAGX,KAAf,EAAsB;AACpBU,IAAAA,OAAO,GAAGX,aAAa,CAACC,KAAK,GAAGW,QAAT,CAAvB;AACD;;AAED,SAAOJ,OAAO,GAAGG,OAAjB;AACD;;AAED,SAASZ,UAAT,CAAqBQ,GAArB,EAA0BN,KAA1B,EAAiC;AAC/B,MAAIO,OAAO,GAAGD,GAAG,CAACM,QAAJ,EAAd;AACA,MAAIL,OAAO,CAACE,MAAR,KAAmB,CAAnB,IAAwBH,GAAG,CAACG,MAAJ,IAAcT,KAA1C,EAAiD,OAAOM,GAAP;AACjD,MAAII,OAAO,GAAG,EAAd;AACA,MAAIC,QAAQ,GAAGrB,WAAW,CAACiB,OAAD,CAA1B;;AAEA,MAAII,QAAQ,GAAGX,KAAf,EAAsB;AACpBU,IAAAA,OAAO,GAAGX,aAAa,CAACC,KAAK,GAAGW,QAAT,CAAvB;AACD;;AAED,SAAOD,OAAO,GAAGH,OAAjB;AACD;;AAED,SAASb,WAAT,CAAsBY,GAAtB,EAA2BN,KAA3B,EAAkC;AAChC,MAAIO,OAAO,GAAGD,GAAG,CAACO,IAAJ,EAAd;AACA,MAAIN,OAAO,CAACE,MAAR,KAAmB,CAAnB,IAAwBH,GAAG,CAACG,MAAJ,IAAcT,KAA1C,EAAiD,OAAOM,GAAP;AACjD,MAAIQ,OAAO,GAAG,EAAd;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIJ,QAAQ,GAAGrB,WAAW,CAACiB,OAAD,CAA1B;;AAEA,MAAII,QAAQ,GAAGX,KAAf,EAAsB;AACpB,QAAIgB,SAAS,GAAGC,QAAQ,CAAC,CAACjB,KAAK,GAAGW,QAAT,IAAqB,CAAtB,EAAyB,EAAzB,CAAxB;AACAG,IAAAA,OAAO,GAAGf,aAAa,CAACiB,SAAD,CAAvB;AACAD,IAAAA,QAAQ,GAAGhB,aAAa,CAACC,KAAK,IAAIW,QAAQ,GAAGK,SAAf,CAAN,CAAxB;AACD;;AAED,SAAOF,OAAO,GAAGP,OAAV,GAAoBQ,QAA3B;AACD","sourcesContent":["'use strict'\nvar stringWidth = require('string-width')\n\nexports.center = alignCenter\nexports.left = alignLeft\nexports.right = alignRight\n\n// lodash's way of generating pad characters.\n\nfunction createPadding (width) {\n  var result = ''\n  var string = ' '\n  var n = width\n  do {\n    if (n % 2) {\n      result += string;\n    }\n    n = Math.floor(n / 2);\n    string += string;\n  } while (n);\n\n  return result;\n}\n\nfunction alignLeft (str, width) {\n  var trimmed = str.trimRight()\n  if (trimmed.length === 0 && str.length >= width) return str\n  var padding = ''\n  var strWidth = stringWidth(trimmed)\n\n  if (strWidth < width) {\n    padding = createPadding(width - strWidth)\n  }\n\n  return trimmed + padding\n}\n\nfunction alignRight (str, width) {\n  var trimmed = str.trimLeft()\n  if (trimmed.length === 0 && str.length >= width) return str\n  var padding = ''\n  var strWidth = stringWidth(trimmed)\n\n  if (strWidth < width) {\n    padding = createPadding(width - strWidth)\n  }\n\n  return padding + trimmed\n}\n\nfunction alignCenter (str, width) {\n  var trimmed = str.trim()\n  if (trimmed.length === 0 && str.length >= width) return str\n  var padLeft = ''\n  var padRight = ''\n  var strWidth = stringWidth(trimmed)\n\n  if (strWidth < width) {\n    var padLeftBy = parseInt((width - strWidth) / 2, 10) \n    padLeft = createPadding(padLeftBy)\n    padRight = createPadding(width - (strWidth + padLeftBy))\n  }\n\n  return padLeft + trimmed + padRight\n}\n"]},"metadata":{},"sourceType":"script"}