{"ast":null,"code":"const assert = require(\"assert\");\n\nconst path = require(\"path\");\n\nconst fs = require(\"fs\");\n\nlet glob = undefined;\n\ntry {\n  glob = require(\"glob\");\n} catch (_err) {// treat glob as optional.\n}\n\nconst defaultGlobOpts = {\n  nosort: true,\n  silent: true\n}; // for EMFILE handling\n\nlet timeout = 0;\nconst isWindows = process.platform === \"win32\";\n\nconst defaults = options => {\n  const methods = ['unlink', 'chmod', 'stat', 'lstat', 'rmdir', 'readdir'];\n  methods.forEach(m => {\n    options[m] = options[m] || fs[m];\n    m = m + 'Sync';\n    options[m] = options[m] || fs[m];\n  });\n  options.maxBusyTries = options.maxBusyTries || 3;\n  options.emfileWait = options.emfileWait || 1000;\n\n  if (options.glob === false) {\n    options.disableGlob = true;\n  }\n\n  if (options.disableGlob !== true && glob === undefined) {\n    throw Error('glob dependency not found, set `options.disableGlob = true` if intentional');\n  }\n\n  options.disableGlob = options.disableGlob || false;\n  options.glob = options.glob || defaultGlobOpts;\n};\n\nconst rimraf = (p, options, cb) => {\n  if (typeof options === 'function') {\n    cb = options;\n    options = {};\n  }\n\n  assert(p, 'rimraf: missing path');\n  assert.equal(typeof p, 'string', 'rimraf: path should be a string');\n  assert.equal(typeof cb, 'function', 'rimraf: callback function required');\n  assert(options, 'rimraf: invalid options argument provided');\n  assert.equal(typeof options, 'object', 'rimraf: options should be object');\n  defaults(options);\n  let busyTries = 0;\n  let errState = null;\n  let n = 0;\n\n  const next = er => {\n    errState = errState || er;\n    if (--n === 0) cb(errState);\n  };\n\n  const afterGlob = (er, results) => {\n    if (er) return cb(er);\n    n = results.length;\n    if (n === 0) return cb();\n    results.forEach(p => {\n      const CB = er => {\n        if (er) {\n          if ((er.code === \"EBUSY\" || er.code === \"ENOTEMPTY\" || er.code === \"EPERM\") && busyTries < options.maxBusyTries) {\n            busyTries++; // try again, with the same exact callback as this one.\n\n            return setTimeout(() => rimraf_(p, options, CB), busyTries * 100);\n          } // this one won't happen if graceful-fs is used.\n\n\n          if (er.code === \"EMFILE\" && timeout < options.emfileWait) {\n            return setTimeout(() => rimraf_(p, options, CB), timeout++);\n          } // already gone\n\n\n          if (er.code === \"ENOENT\") er = null;\n        }\n\n        timeout = 0;\n        next(er);\n      };\n\n      rimraf_(p, options, CB);\n    });\n  };\n\n  if (options.disableGlob || !glob.hasMagic(p)) return afterGlob(null, [p]);\n  options.lstat(p, (er, stat) => {\n    if (!er) return afterGlob(null, [p]);\n    glob(p, options.glob, afterGlob);\n  });\n}; // Two possible strategies.\n// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR\n// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR\n//\n// Both result in an extra syscall when you guess wrong.  However, there\n// are likely far more normal files in the world than directories.  This\n// is based on the assumption that a the average number of files per\n// directory is >= 1.\n//\n// If anyone ever complains about this, then I guess the strategy could\n// be made configurable somehow.  But until then, YAGNI.\n\n\nconst rimraf_ = (p, options, cb) => {\n  assert(p);\n  assert(options);\n  assert(typeof cb === 'function'); // sunos lets the root user unlink directories, which is... weird.\n  // so we have to lstat here and make sure it's not a dir.\n\n  options.lstat(p, (er, st) => {\n    if (er && er.code === \"ENOENT\") return cb(null); // Windows can EPERM on stat.  Life is suffering.\n\n    if (er && er.code === \"EPERM\" && isWindows) fixWinEPERM(p, options, er, cb);\n    if (st && st.isDirectory()) return rmdir(p, options, er, cb);\n    options.unlink(p, er => {\n      if (er) {\n        if (er.code === \"ENOENT\") return cb(null);\n        if (er.code === \"EPERM\") return isWindows ? fixWinEPERM(p, options, er, cb) : rmdir(p, options, er, cb);\n        if (er.code === \"EISDIR\") return rmdir(p, options, er, cb);\n      }\n\n      return cb(er);\n    });\n  });\n};\n\nconst fixWinEPERM = (p, options, er, cb) => {\n  assert(p);\n  assert(options);\n  assert(typeof cb === 'function');\n  options.chmod(p, 0o666, er2 => {\n    if (er2) cb(er2.code === \"ENOENT\" ? null : er);else options.stat(p, (er3, stats) => {\n      if (er3) cb(er3.code === \"ENOENT\" ? null : er);else if (stats.isDirectory()) rmdir(p, options, er, cb);else options.unlink(p, cb);\n    });\n  });\n};\n\nconst fixWinEPERMSync = (p, options, er) => {\n  assert(p);\n  assert(options);\n\n  try {\n    options.chmodSync(p, 0o666);\n  } catch (er2) {\n    if (er2.code === \"ENOENT\") return;else throw er;\n  }\n\n  let stats;\n\n  try {\n    stats = options.statSync(p);\n  } catch (er3) {\n    if (er3.code === \"ENOENT\") return;else throw er;\n  }\n\n  if (stats.isDirectory()) rmdirSync(p, options, er);else options.unlinkSync(p);\n};\n\nconst rmdir = (p, options, originalEr, cb) => {\n  assert(p);\n  assert(options);\n  assert(typeof cb === 'function'); // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)\n  // if we guessed wrong, and it's not a directory, then\n  // raise the original error.\n\n  options.rmdir(p, er => {\n    if (er && (er.code === \"ENOTEMPTY\" || er.code === \"EEXIST\" || er.code === \"EPERM\")) rmkids(p, options, cb);else if (er && er.code === \"ENOTDIR\") cb(originalEr);else cb(er);\n  });\n};\n\nconst rmkids = (p, options, cb) => {\n  assert(p);\n  assert(options);\n  assert(typeof cb === 'function');\n  options.readdir(p, (er, files) => {\n    if (er) return cb(er);\n    let n = files.length;\n    if (n === 0) return options.rmdir(p, cb);\n    let errState;\n    files.forEach(f => {\n      rimraf(path.join(p, f), options, er => {\n        if (errState) return;\n        if (er) return cb(errState = er);\n        if (--n === 0) options.rmdir(p, cb);\n      });\n    });\n  });\n}; // this looks simpler, and is strictly *faster*, but will\n// tie up the JavaScript thread and fail on excessively\n// deep directory trees.\n\n\nconst rimrafSync = (p, options) => {\n  options = options || {};\n  defaults(options);\n  assert(p, 'rimraf: missing path');\n  assert.equal(typeof p, 'string', 'rimraf: path should be a string');\n  assert(options, 'rimraf: missing options');\n  assert.equal(typeof options, 'object', 'rimraf: options should be object');\n  let results;\n\n  if (options.disableGlob || !glob.hasMagic(p)) {\n    results = [p];\n  } else {\n    try {\n      options.lstatSync(p);\n      results = [p];\n    } catch (er) {\n      results = glob.sync(p, options.glob);\n    }\n  }\n\n  if (!results.length) return;\n\n  for (let i = 0; i < results.length; i++) {\n    const p = results[i];\n    let st;\n\n    try {\n      st = options.lstatSync(p);\n    } catch (er) {\n      if (er.code === \"ENOENT\") return; // Windows can EPERM on stat.  Life is suffering.\n\n      if (er.code === \"EPERM\" && isWindows) fixWinEPERMSync(p, options, er);\n    }\n\n    try {\n      // sunos lets the root user unlink directories, which is... weird.\n      if (st && st.isDirectory()) rmdirSync(p, options, null);else options.unlinkSync(p);\n    } catch (er) {\n      if (er.code === \"ENOENT\") return;\n      if (er.code === \"EPERM\") return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er);\n      if (er.code !== \"EISDIR\") throw er;\n      rmdirSync(p, options, er);\n    }\n  }\n};\n\nconst rmdirSync = (p, options, originalEr) => {\n  assert(p);\n  assert(options);\n\n  try {\n    options.rmdirSync(p);\n  } catch (er) {\n    if (er.code === \"ENOENT\") return;\n    if (er.code === \"ENOTDIR\") throw originalEr;\n    if (er.code === \"ENOTEMPTY\" || er.code === \"EEXIST\" || er.code === \"EPERM\") rmkidsSync(p, options);\n  }\n};\n\nconst rmkidsSync = (p, options) => {\n  assert(p);\n  assert(options);\n  options.readdirSync(p).forEach(f => rimrafSync(path.join(p, f), options)); // We only end up here once we got ENOTEMPTY at least once, and\n  // at this point, we are guaranteed to have removed all the kids.\n  // So, we know that it won't be ENOENT or ENOTDIR or anything else.\n  // try really hard to delete stuff on windows, because it has a\n  // PROFOUNDLY annoying habit of not closing handles promptly when\n  // files are deleted, resulting in spurious ENOTEMPTY errors.\n\n  const retries = isWindows ? 100 : 1;\n  let i = 0;\n\n  do {\n    let threw = true;\n\n    try {\n      const ret = options.rmdirSync(p, options);\n      threw = false;\n      return ret;\n    } finally {\n      if (++i < retries && threw) continue;\n    }\n  } while (true);\n};\n\nmodule.exports = rimraf;\nrimraf.sync = rimrafSync;","map":{"version":3,"sources":["C:/Users/ojaswi/Social - Media web app/frontend-react-app/node_modules/rimraf/rimraf.js"],"names":["assert","require","path","fs","glob","undefined","_err","defaultGlobOpts","nosort","silent","timeout","isWindows","process","platform","defaults","options","methods","forEach","m","maxBusyTries","emfileWait","disableGlob","Error","rimraf","p","cb","equal","busyTries","errState","n","next","er","afterGlob","results","length","CB","code","setTimeout","rimraf_","hasMagic","lstat","stat","st","fixWinEPERM","isDirectory","rmdir","unlink","chmod","er2","er3","stats","fixWinEPERMSync","chmodSync","statSync","rmdirSync","unlinkSync","originalEr","rmkids","readdir","files","f","join","rimrafSync","lstatSync","sync","i","rmkidsSync","readdirSync","retries","threw","ret","module","exports"],"mappings":"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","sourcesContent":["const assert = require(\"assert\")\nconst path = require(\"path\")\nconst fs = require(\"fs\")\nlet glob = undefined\ntry {\n  glob = require(\"glob\")\n} catch (_err) {\n  // treat glob as optional.\n}\n\nconst defaultGlobOpts = {\n  nosort: true,\n  silent: true\n}\n\n// for EMFILE handling\nlet timeout = 0\n\nconst isWindows = (process.platform === \"win32\")\n\nconst defaults = options => {\n  const methods = [\n    'unlink',\n    'chmod',\n    'stat',\n    'lstat',\n    'rmdir',\n    'readdir'\n  ]\n  methods.forEach(m => {\n    options[m] = options[m] || fs[m]\n    m = m + 'Sync'\n    options[m] = options[m] || fs[m]\n  })\n\n  options.maxBusyTries = options.maxBusyTries || 3\n  options.emfileWait = options.emfileWait || 1000\n  if (options.glob === false) {\n    options.disableGlob = true\n  }\n  if (options.disableGlob !== true && glob === undefined) {\n    throw Error('glob dependency not found, set `options.disableGlob = true` if intentional')\n  }\n  options.disableGlob = options.disableGlob || false\n  options.glob = options.glob || defaultGlobOpts\n}\n\nconst rimraf = (p, options, cb) => {\n  if (typeof options === 'function') {\n    cb = options\n    options = {}\n  }\n\n  assert(p, 'rimraf: missing path')\n  assert.equal(typeof p, 'string', 'rimraf: path should be a string')\n  assert.equal(typeof cb, 'function', 'rimraf: callback function required')\n  assert(options, 'rimraf: invalid options argument provided')\n  assert.equal(typeof options, 'object', 'rimraf: options should be object')\n\n  defaults(options)\n\n  let busyTries = 0\n  let errState = null\n  let n = 0\n\n  const next = (er) => {\n    errState = errState || er\n    if (--n === 0)\n      cb(errState)\n  }\n\n  const afterGlob = (er, results) => {\n    if (er)\n      return cb(er)\n\n    n = results.length\n    if (n === 0)\n      return cb()\n\n    results.forEach(p => {\n      const CB = (er) => {\n        if (er) {\n          if ((er.code === \"EBUSY\" || er.code === \"ENOTEMPTY\" || er.code === \"EPERM\") &&\n              busyTries < options.maxBusyTries) {\n            busyTries ++\n            // try again, with the same exact callback as this one.\n            return setTimeout(() => rimraf_(p, options, CB), busyTries * 100)\n          }\n\n          // this one won't happen if graceful-fs is used.\n          if (er.code === \"EMFILE\" && timeout < options.emfileWait) {\n            return setTimeout(() => rimraf_(p, options, CB), timeout ++)\n          }\n\n          // already gone\n          if (er.code === \"ENOENT\") er = null\n        }\n\n        timeout = 0\n        next(er)\n      }\n      rimraf_(p, options, CB)\n    })\n  }\n\n  if (options.disableGlob || !glob.hasMagic(p))\n    return afterGlob(null, [p])\n\n  options.lstat(p, (er, stat) => {\n    if (!er)\n      return afterGlob(null, [p])\n\n    glob(p, options.glob, afterGlob)\n  })\n\n}\n\n// Two possible strategies.\n// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR\n// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR\n//\n// Both result in an extra syscall when you guess wrong.  However, there\n// are likely far more normal files in the world than directories.  This\n// is based on the assumption that a the average number of files per\n// directory is >= 1.\n//\n// If anyone ever complains about this, then I guess the strategy could\n// be made configurable somehow.  But until then, YAGNI.\nconst rimraf_ = (p, options, cb) => {\n  assert(p)\n  assert(options)\n  assert(typeof cb === 'function')\n\n  // sunos lets the root user unlink directories, which is... weird.\n  // so we have to lstat here and make sure it's not a dir.\n  options.lstat(p, (er, st) => {\n    if (er && er.code === \"ENOENT\")\n      return cb(null)\n\n    // Windows can EPERM on stat.  Life is suffering.\n    if (er && er.code === \"EPERM\" && isWindows)\n      fixWinEPERM(p, options, er, cb)\n\n    if (st && st.isDirectory())\n      return rmdir(p, options, er, cb)\n\n    options.unlink(p, er => {\n      if (er) {\n        if (er.code === \"ENOENT\")\n          return cb(null)\n        if (er.code === \"EPERM\")\n          return (isWindows)\n            ? fixWinEPERM(p, options, er, cb)\n            : rmdir(p, options, er, cb)\n        if (er.code === \"EISDIR\")\n          return rmdir(p, options, er, cb)\n      }\n      return cb(er)\n    })\n  })\n}\n\nconst fixWinEPERM = (p, options, er, cb) => {\n  assert(p)\n  assert(options)\n  assert(typeof cb === 'function')\n\n  options.chmod(p, 0o666, er2 => {\n    if (er2)\n      cb(er2.code === \"ENOENT\" ? null : er)\n    else\n      options.stat(p, (er3, stats) => {\n        if (er3)\n          cb(er3.code === \"ENOENT\" ? null : er)\n        else if (stats.isDirectory())\n          rmdir(p, options, er, cb)\n        else\n          options.unlink(p, cb)\n      })\n  })\n}\n\nconst fixWinEPERMSync = (p, options, er) => {\n  assert(p)\n  assert(options)\n\n  try {\n    options.chmodSync(p, 0o666)\n  } catch (er2) {\n    if (er2.code === \"ENOENT\")\n      return\n    else\n      throw er\n  }\n\n  let stats\n  try {\n    stats = options.statSync(p)\n  } catch (er3) {\n    if (er3.code === \"ENOENT\")\n      return\n    else\n      throw er\n  }\n\n  if (stats.isDirectory())\n    rmdirSync(p, options, er)\n  else\n    options.unlinkSync(p)\n}\n\nconst rmdir = (p, options, originalEr, cb) => {\n  assert(p)\n  assert(options)\n  assert(typeof cb === 'function')\n\n  // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)\n  // if we guessed wrong, and it's not a directory, then\n  // raise the original error.\n  options.rmdir(p, er => {\n    if (er && (er.code === \"ENOTEMPTY\" || er.code === \"EEXIST\" || er.code === \"EPERM\"))\n      rmkids(p, options, cb)\n    else if (er && er.code === \"ENOTDIR\")\n      cb(originalEr)\n    else\n      cb(er)\n  })\n}\n\nconst rmkids = (p, options, cb) => {\n  assert(p)\n  assert(options)\n  assert(typeof cb === 'function')\n\n  options.readdir(p, (er, files) => {\n    if (er)\n      return cb(er)\n    let n = files.length\n    if (n === 0)\n      return options.rmdir(p, cb)\n    let errState\n    files.forEach(f => {\n      rimraf(path.join(p, f), options, er => {\n        if (errState)\n          return\n        if (er)\n          return cb(errState = er)\n        if (--n === 0)\n          options.rmdir(p, cb)\n      })\n    })\n  })\n}\n\n// this looks simpler, and is strictly *faster*, but will\n// tie up the JavaScript thread and fail on excessively\n// deep directory trees.\nconst rimrafSync = (p, options) => {\n  options = options || {}\n  defaults(options)\n\n  assert(p, 'rimraf: missing path')\n  assert.equal(typeof p, 'string', 'rimraf: path should be a string')\n  assert(options, 'rimraf: missing options')\n  assert.equal(typeof options, 'object', 'rimraf: options should be object')\n\n  let results\n\n  if (options.disableGlob || !glob.hasMagic(p)) {\n    results = [p]\n  } else {\n    try {\n      options.lstatSync(p)\n      results = [p]\n    } catch (er) {\n      results = glob.sync(p, options.glob)\n    }\n  }\n\n  if (!results.length)\n    return\n\n  for (let i = 0; i < results.length; i++) {\n    const p = results[i]\n\n    let st\n    try {\n      st = options.lstatSync(p)\n    } catch (er) {\n      if (er.code === \"ENOENT\")\n        return\n\n      // Windows can EPERM on stat.  Life is suffering.\n      if (er.code === \"EPERM\" && isWindows)\n        fixWinEPERMSync(p, options, er)\n    }\n\n    try {\n      // sunos lets the root user unlink directories, which is... weird.\n      if (st && st.isDirectory())\n        rmdirSync(p, options, null)\n      else\n        options.unlinkSync(p)\n    } catch (er) {\n      if (er.code === \"ENOENT\")\n        return\n      if (er.code === \"EPERM\")\n        return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er)\n      if (er.code !== \"EISDIR\")\n        throw er\n\n      rmdirSync(p, options, er)\n    }\n  }\n}\n\nconst rmdirSync = (p, options, originalEr) => {\n  assert(p)\n  assert(options)\n\n  try {\n    options.rmdirSync(p)\n  } catch (er) {\n    if (er.code === \"ENOENT\")\n      return\n    if (er.code === \"ENOTDIR\")\n      throw originalEr\n    if (er.code === \"ENOTEMPTY\" || er.code === \"EEXIST\" || er.code === \"EPERM\")\n      rmkidsSync(p, options)\n  }\n}\n\nconst rmkidsSync = (p, options) => {\n  assert(p)\n  assert(options)\n  options.readdirSync(p).forEach(f => rimrafSync(path.join(p, f), options))\n\n  // We only end up here once we got ENOTEMPTY at least once, and\n  // at this point, we are guaranteed to have removed all the kids.\n  // So, we know that it won't be ENOENT or ENOTDIR or anything else.\n  // try really hard to delete stuff on windows, because it has a\n  // PROFOUNDLY annoying habit of not closing handles promptly when\n  // files are deleted, resulting in spurious ENOTEMPTY errors.\n  const retries = isWindows ? 100 : 1\n  let i = 0\n  do {\n    let threw = true\n    try {\n      const ret = options.rmdirSync(p, options)\n      threw = false\n      return ret\n    } finally {\n      if (++i < retries && threw)\n        continue\n    }\n  } while (true)\n}\n\nmodule.exports = rimraf\nrimraf.sync = rimrafSync\n"]},"metadata":{},"sourceType":"script"}