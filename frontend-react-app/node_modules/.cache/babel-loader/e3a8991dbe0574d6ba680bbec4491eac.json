{"ast":null,"code":"'use strict'; // parse a 512-byte header block to a data object, or vice-versa\n// encode returns `true` if a pax extended header is needed, because\n// the data could not be faithfully encoded in a simple header.\n// (Also, check header.needPax to see if it needs a pax header.)\n\nconst types = require('./types.js');\n\nconst pathModule = require('path').posix;\n\nconst large = require('./large-numbers.js');\n\nconst SLURP = Symbol('slurp');\nconst TYPE = Symbol('type');\n\nclass Header {\n  constructor(data, off, ex, gex) {\n    this.cksumValid = false;\n    this.needPax = false;\n    this.nullBlock = false;\n    this.block = null;\n    this.path = null;\n    this.mode = null;\n    this.uid = null;\n    this.gid = null;\n    this.size = null;\n    this.mtime = null;\n    this.cksum = null;\n    this[TYPE] = '0';\n    this.linkpath = null;\n    this.uname = null;\n    this.gname = null;\n    this.devmaj = 0;\n    this.devmin = 0;\n    this.atime = null;\n    this.ctime = null;\n    if (Buffer.isBuffer(data)) this.decode(data, off || 0, ex, gex);else if (data) this.set(data);\n  }\n\n  decode(buf, off, ex, gex) {\n    if (!off) off = 0;\n    if (!buf || !(buf.length >= off + 512)) throw new Error('need 512 bytes for header');\n    this.path = decString(buf, off, 100);\n    this.mode = decNumber(buf, off + 100, 8);\n    this.uid = decNumber(buf, off + 108, 8);\n    this.gid = decNumber(buf, off + 116, 8);\n    this.size = decNumber(buf, off + 124, 12);\n    this.mtime = decDate(buf, off + 136, 12);\n    this.cksum = decNumber(buf, off + 148, 12); // if we have extended or global extended headers, apply them now\n    // See https://github.com/npm/node-tar/pull/187\n\n    this[SLURP](ex);\n    this[SLURP](gex, true); // old tar versions marked dirs as a file with a trailing /\n\n    this[TYPE] = decString(buf, off + 156, 1);\n    if (this[TYPE] === '') this[TYPE] = '0';\n    if (this[TYPE] === '0' && this.path.substr(-1) === '/') this[TYPE] = '5'; // tar implementations sometimes incorrectly put the stat(dir).size\n    // as the size in the tarball, even though Directory entries are\n    // not able to have any body at all.  In the very rare chance that\n    // it actually DOES have a body, we weren't going to do anything with\n    // it anyway, and it'll just be a warning about an invalid header.\n\n    if (this[TYPE] === '5') this.size = 0;\n    this.linkpath = decString(buf, off + 157, 100);\n\n    if (buf.slice(off + 257, off + 265).toString() === 'ustar\\u000000') {\n      this.uname = decString(buf, off + 265, 32);\n      this.gname = decString(buf, off + 297, 32);\n      this.devmaj = decNumber(buf, off + 329, 8);\n      this.devmin = decNumber(buf, off + 337, 8);\n\n      if (buf[off + 475] !== 0) {\n        // definitely a prefix, definitely >130 chars.\n        const prefix = decString(buf, off + 345, 155);\n        this.path = prefix + '/' + this.path;\n      } else {\n        const prefix = decString(buf, off + 345, 130);\n        if (prefix) this.path = prefix + '/' + this.path;\n        this.atime = decDate(buf, off + 476, 12);\n        this.ctime = decDate(buf, off + 488, 12);\n      }\n    }\n\n    let sum = 8 * 0x20;\n\n    for (let i = off; i < off + 148; i++) sum += buf[i];\n\n    for (let i = off + 156; i < off + 512; i++) sum += buf[i];\n\n    this.cksumValid = sum === this.cksum;\n    if (this.cksum === null && sum === 8 * 0x20) this.nullBlock = true;\n  }\n\n  [SLURP](ex, global) {\n    for (const k in ex) {\n      // we slurp in everything except for the path attribute in\n      // a global extended header, because that's weird.\n      if (ex[k] !== null && ex[k] !== undefined && !(global && k === 'path')) this[k] = ex[k];\n    }\n  }\n\n  encode(buf, off) {\n    if (!buf) {\n      buf = this.block = Buffer.alloc(512);\n      off = 0;\n    }\n\n    if (!off) off = 0;\n    if (!(buf.length >= off + 512)) throw new Error('need 512 bytes for header');\n    const prefixSize = this.ctime || this.atime ? 130 : 155;\n    const split = splitPrefix(this.path || '', prefixSize);\n    const path = split[0];\n    const prefix = split[1];\n    this.needPax = split[2];\n    this.needPax = encString(buf, off, 100, path) || this.needPax;\n    this.needPax = encNumber(buf, off + 100, 8, this.mode) || this.needPax;\n    this.needPax = encNumber(buf, off + 108, 8, this.uid) || this.needPax;\n    this.needPax = encNumber(buf, off + 116, 8, this.gid) || this.needPax;\n    this.needPax = encNumber(buf, off + 124, 12, this.size) || this.needPax;\n    this.needPax = encDate(buf, off + 136, 12, this.mtime) || this.needPax;\n    buf[off + 156] = this[TYPE].charCodeAt(0);\n    this.needPax = encString(buf, off + 157, 100, this.linkpath) || this.needPax;\n    buf.write('ustar\\u000000', off + 257, 8);\n    this.needPax = encString(buf, off + 265, 32, this.uname) || this.needPax;\n    this.needPax = encString(buf, off + 297, 32, this.gname) || this.needPax;\n    this.needPax = encNumber(buf, off + 329, 8, this.devmaj) || this.needPax;\n    this.needPax = encNumber(buf, off + 337, 8, this.devmin) || this.needPax;\n    this.needPax = encString(buf, off + 345, prefixSize, prefix) || this.needPax;\n    if (buf[off + 475] !== 0) this.needPax = encString(buf, off + 345, 155, prefix) || this.needPax;else {\n      this.needPax = encString(buf, off + 345, 130, prefix) || this.needPax;\n      this.needPax = encDate(buf, off + 476, 12, this.atime) || this.needPax;\n      this.needPax = encDate(buf, off + 488, 12, this.ctime) || this.needPax;\n    }\n    let sum = 8 * 0x20;\n\n    for (let i = off; i < off + 148; i++) sum += buf[i];\n\n    for (let i = off + 156; i < off + 512; i++) sum += buf[i];\n\n    this.cksum = sum;\n    encNumber(buf, off + 148, 8, this.cksum);\n    this.cksumValid = true;\n    return this.needPax;\n  }\n\n  set(data) {\n    for (const i in data) {\n      if (data[i] !== null && data[i] !== undefined) this[i] = data[i];\n    }\n  }\n\n  get type() {\n    return types.name.get(this[TYPE]) || this[TYPE];\n  }\n\n  get typeKey() {\n    return this[TYPE];\n  }\n\n  set type(type) {\n    if (types.code.has(type)) this[TYPE] = types.code.get(type);else this[TYPE] = type;\n  }\n\n}\n\nconst splitPrefix = (p, prefixSize) => {\n  const pathSize = 100;\n  let pp = p;\n  let prefix = '';\n  let ret;\n  const root = pathModule.parse(p).root || '.';\n  if (Buffer.byteLength(pp) < pathSize) ret = [pp, prefix, false];else {\n    // first set prefix to the dir, and path to the base\n    prefix = pathModule.dirname(pp);\n    pp = pathModule.basename(pp);\n\n    do {\n      // both fit!\n      if (Buffer.byteLength(pp) <= pathSize && Buffer.byteLength(prefix) <= prefixSize) ret = [pp, prefix, false]; // prefix fits in prefix, but path doesn't fit in path\n      else if (Buffer.byteLength(pp) > pathSize && Buffer.byteLength(prefix) <= prefixSize) ret = [pp.substr(0, pathSize - 1), prefix, true];else {\n        // make path take a bit from prefix\n        pp = pathModule.join(pathModule.basename(prefix), pp);\n        prefix = pathModule.dirname(prefix);\n      }\n    } while (prefix !== root && !ret); // at this point, found no resolution, just truncate\n\n\n    if (!ret) ret = [p.substr(0, pathSize - 1), '', true];\n  }\n  return ret;\n};\n\nconst decString = (buf, off, size) => buf.slice(off, off + size).toString('utf8').replace(/\\0.*/, '');\n\nconst decDate = (buf, off, size) => numToDate(decNumber(buf, off, size));\n\nconst numToDate = num => num === null ? null : new Date(num * 1000);\n\nconst decNumber = (buf, off, size) => buf[off] & 0x80 ? large.parse(buf.slice(off, off + size)) : decSmallNumber(buf, off, size);\n\nconst nanNull = value => isNaN(value) ? null : value;\n\nconst decSmallNumber = (buf, off, size) => nanNull(parseInt(buf.slice(off, off + size).toString('utf8').replace(/\\0.*$/, '').trim(), 8)); // the maximum encodable as a null-terminated octal, by field size\n\n\nconst MAXNUM = {\n  12: 0o77777777777,\n  8: 0o7777777\n};\n\nconst encNumber = (buf, off, size, number) => number === null ? false : number > MAXNUM[size] || number < 0 ? (large.encode(number, buf.slice(off, off + size)), true) : (encSmallNumber(buf, off, size, number), false);\n\nconst encSmallNumber = (buf, off, size, number) => buf.write(octalString(number, size), off, size, 'ascii');\n\nconst octalString = (number, size) => padOctal(Math.floor(number).toString(8), size);\n\nconst padOctal = (string, size) => (string.length === size - 1 ? string : new Array(size - string.length - 1).join('0') + string + ' ') + '\\0';\n\nconst encDate = (buf, off, size, date) => date === null ? false : encNumber(buf, off, size, date.getTime() / 1000); // enough to fill the longest string we've got\n\n\nconst NULLS = new Array(156).join('\\0'); // pad with nulls, return true if it's longer or non-ascii\n\nconst encString = (buf, off, size, string) => string === null ? false : (buf.write(string + NULLS, off, size, 'utf8'), string.length !== Buffer.byteLength(string) || string.length > size);\n\nmodule.exports = Header;","map":{"version":3,"sources":["C:/Users/ojaswi/Social - Media web app/frontend-react-app/node_modules/tar/lib/header.js"],"names":["types","require","pathModule","posix","large","SLURP","Symbol","TYPE","Header","constructor","data","off","ex","gex","cksumValid","needPax","nullBlock","block","path","mode","uid","gid","size","mtime","cksum","linkpath","uname","gname","devmaj","devmin","atime","ctime","Buffer","isBuffer","decode","set","buf","length","Error","decString","decNumber","decDate","substr","slice","toString","prefix","sum","i","global","k","undefined","encode","alloc","prefixSize","split","splitPrefix","encString","encNumber","encDate","charCodeAt","write","type","name","get","typeKey","code","has","p","pathSize","pp","ret","root","parse","byteLength","dirname","basename","join","replace","numToDate","num","Date","decSmallNumber","nanNull","value","isNaN","parseInt","trim","MAXNUM","number","encSmallNumber","octalString","padOctal","Math","floor","string","Array","date","getTime","NULLS","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n// parse a 512-byte header block to a data object, or vice-versa\n// encode returns `true` if a pax extended header is needed, because\n// the data could not be faithfully encoded in a simple header.\n// (Also, check header.needPax to see if it needs a pax header.)\n\nconst types = require('./types.js')\nconst pathModule = require('path').posix\nconst large = require('./large-numbers.js')\n\nconst SLURP = Symbol('slurp')\nconst TYPE = Symbol('type')\n\nclass Header {\n  constructor (data, off, ex, gex) {\n    this.cksumValid = false\n    this.needPax = false\n    this.nullBlock = false\n\n    this.block = null\n    this.path = null\n    this.mode = null\n    this.uid = null\n    this.gid = null\n    this.size = null\n    this.mtime = null\n    this.cksum = null\n    this[TYPE] = '0'\n    this.linkpath = null\n    this.uname = null\n    this.gname = null\n    this.devmaj = 0\n    this.devmin = 0\n    this.atime = null\n    this.ctime = null\n\n    if (Buffer.isBuffer(data))\n      this.decode(data, off || 0, ex, gex)\n    else if (data)\n      this.set(data)\n  }\n\n  decode (buf, off, ex, gex) {\n    if (!off)\n      off = 0\n\n    if (!buf || !(buf.length >= off + 512))\n      throw new Error('need 512 bytes for header')\n\n    this.path = decString(buf, off, 100)\n    this.mode = decNumber(buf, off + 100, 8)\n    this.uid = decNumber(buf, off + 108, 8)\n    this.gid = decNumber(buf, off + 116, 8)\n    this.size = decNumber(buf, off + 124, 12)\n    this.mtime = decDate(buf, off + 136, 12)\n    this.cksum = decNumber(buf, off + 148, 12)\n\n    // if we have extended or global extended headers, apply them now\n    // See https://github.com/npm/node-tar/pull/187\n    this[SLURP](ex)\n    this[SLURP](gex, true)\n\n    // old tar versions marked dirs as a file with a trailing /\n    this[TYPE] = decString(buf, off + 156, 1)\n    if (this[TYPE] === '')\n      this[TYPE] = '0'\n    if (this[TYPE] === '0' && this.path.substr(-1) === '/')\n      this[TYPE] = '5'\n\n    // tar implementations sometimes incorrectly put the stat(dir).size\n    // as the size in the tarball, even though Directory entries are\n    // not able to have any body at all.  In the very rare chance that\n    // it actually DOES have a body, we weren't going to do anything with\n    // it anyway, and it'll just be a warning about an invalid header.\n    if (this[TYPE] === '5')\n      this.size = 0\n\n    this.linkpath = decString(buf, off + 157, 100)\n    if (buf.slice(off + 257, off + 265).toString() === 'ustar\\u000000') {\n      this.uname = decString(buf, off + 265, 32)\n      this.gname = decString(buf, off + 297, 32)\n      this.devmaj = decNumber(buf, off + 329, 8)\n      this.devmin = decNumber(buf, off + 337, 8)\n      if (buf[off + 475] !== 0) {\n        // definitely a prefix, definitely >130 chars.\n        const prefix = decString(buf, off + 345, 155)\n        this.path = prefix + '/' + this.path\n      } else {\n        const prefix = decString(buf, off + 345, 130)\n        if (prefix)\n          this.path = prefix + '/' + this.path\n        this.atime = decDate(buf, off + 476, 12)\n        this.ctime = decDate(buf, off + 488, 12)\n      }\n    }\n\n    let sum = 8 * 0x20\n    for (let i = off; i < off + 148; i++)\n      sum += buf[i]\n\n    for (let i = off + 156; i < off + 512; i++)\n      sum += buf[i]\n\n    this.cksumValid = sum === this.cksum\n    if (this.cksum === null && sum === 8 * 0x20)\n      this.nullBlock = true\n  }\n\n  [SLURP] (ex, global) {\n    for (const k in ex) {\n      // we slurp in everything except for the path attribute in\n      // a global extended header, because that's weird.\n      if (ex[k] !== null && ex[k] !== undefined &&\n          !(global && k === 'path'))\n        this[k] = ex[k]\n    }\n  }\n\n  encode (buf, off) {\n    if (!buf) {\n      buf = this.block = Buffer.alloc(512)\n      off = 0\n    }\n\n    if (!off)\n      off = 0\n\n    if (!(buf.length >= off + 512))\n      throw new Error('need 512 bytes for header')\n\n    const prefixSize = this.ctime || this.atime ? 130 : 155\n    const split = splitPrefix(this.path || '', prefixSize)\n    const path = split[0]\n    const prefix = split[1]\n    this.needPax = split[2]\n\n    this.needPax = encString(buf, off, 100, path) || this.needPax\n    this.needPax = encNumber(buf, off + 100, 8, this.mode) || this.needPax\n    this.needPax = encNumber(buf, off + 108, 8, this.uid) || this.needPax\n    this.needPax = encNumber(buf, off + 116, 8, this.gid) || this.needPax\n    this.needPax = encNumber(buf, off + 124, 12, this.size) || this.needPax\n    this.needPax = encDate(buf, off + 136, 12, this.mtime) || this.needPax\n    buf[off + 156] = this[TYPE].charCodeAt(0)\n    this.needPax = encString(buf, off + 157, 100, this.linkpath) || this.needPax\n    buf.write('ustar\\u000000', off + 257, 8)\n    this.needPax = encString(buf, off + 265, 32, this.uname) || this.needPax\n    this.needPax = encString(buf, off + 297, 32, this.gname) || this.needPax\n    this.needPax = encNumber(buf, off + 329, 8, this.devmaj) || this.needPax\n    this.needPax = encNumber(buf, off + 337, 8, this.devmin) || this.needPax\n    this.needPax = encString(buf, off + 345, prefixSize, prefix) || this.needPax\n    if (buf[off + 475] !== 0)\n      this.needPax = encString(buf, off + 345, 155, prefix) || this.needPax\n    else {\n      this.needPax = encString(buf, off + 345, 130, prefix) || this.needPax\n      this.needPax = encDate(buf, off + 476, 12, this.atime) || this.needPax\n      this.needPax = encDate(buf, off + 488, 12, this.ctime) || this.needPax\n    }\n\n    let sum = 8 * 0x20\n    for (let i = off; i < off + 148; i++)\n      sum += buf[i]\n\n    for (let i = off + 156; i < off + 512; i++)\n      sum += buf[i]\n\n    this.cksum = sum\n    encNumber(buf, off + 148, 8, this.cksum)\n    this.cksumValid = true\n\n    return this.needPax\n  }\n\n  set (data) {\n    for (const i in data) {\n      if (data[i] !== null && data[i] !== undefined)\n        this[i] = data[i]\n    }\n  }\n\n  get type () {\n    return types.name.get(this[TYPE]) || this[TYPE]\n  }\n\n  get typeKey () {\n    return this[TYPE]\n  }\n\n  set type (type) {\n    if (types.code.has(type))\n      this[TYPE] = types.code.get(type)\n    else\n      this[TYPE] = type\n  }\n}\n\nconst splitPrefix = (p, prefixSize) => {\n  const pathSize = 100\n  let pp = p\n  let prefix = ''\n  let ret\n  const root = pathModule.parse(p).root || '.'\n\n  if (Buffer.byteLength(pp) < pathSize)\n    ret = [pp, prefix, false]\n  else {\n    // first set prefix to the dir, and path to the base\n    prefix = pathModule.dirname(pp)\n    pp = pathModule.basename(pp)\n\n    do {\n      // both fit!\n      if (Buffer.byteLength(pp) <= pathSize &&\n          Buffer.byteLength(prefix) <= prefixSize)\n        ret = [pp, prefix, false]\n\n      // prefix fits in prefix, but path doesn't fit in path\n      else if (Buffer.byteLength(pp) > pathSize &&\n          Buffer.byteLength(prefix) <= prefixSize)\n        ret = [pp.substr(0, pathSize - 1), prefix, true]\n\n      else {\n        // make path take a bit from prefix\n        pp = pathModule.join(pathModule.basename(prefix), pp)\n        prefix = pathModule.dirname(prefix)\n      }\n    } while (prefix !== root && !ret)\n\n    // at this point, found no resolution, just truncate\n    if (!ret)\n      ret = [p.substr(0, pathSize - 1), '', true]\n  }\n  return ret\n}\n\nconst decString = (buf, off, size) =>\n  buf.slice(off, off + size).toString('utf8').replace(/\\0.*/, '')\n\nconst decDate = (buf, off, size) =>\n  numToDate(decNumber(buf, off, size))\n\nconst numToDate = num => num === null ? null : new Date(num * 1000)\n\nconst decNumber = (buf, off, size) =>\n  buf[off] & 0x80 ? large.parse(buf.slice(off, off + size))\n  : decSmallNumber(buf, off, size)\n\nconst nanNull = value => isNaN(value) ? null : value\n\nconst decSmallNumber = (buf, off, size) =>\n  nanNull(parseInt(\n    buf.slice(off, off + size)\n      .toString('utf8').replace(/\\0.*$/, '').trim(), 8))\n\n// the maximum encodable as a null-terminated octal, by field size\nconst MAXNUM = {\n  12: 0o77777777777,\n  8: 0o7777777,\n}\n\nconst encNumber = (buf, off, size, number) =>\n  number === null ? false :\n  number > MAXNUM[size] || number < 0\n    ? (large.encode(number, buf.slice(off, off + size)), true)\n    : (encSmallNumber(buf, off, size, number), false)\n\nconst encSmallNumber = (buf, off, size, number) =>\n  buf.write(octalString(number, size), off, size, 'ascii')\n\nconst octalString = (number, size) =>\n  padOctal(Math.floor(number).toString(8), size)\n\nconst padOctal = (string, size) =>\n  (string.length === size - 1 ? string\n  : new Array(size - string.length - 1).join('0') + string + ' ') + '\\0'\n\nconst encDate = (buf, off, size, date) =>\n  date === null ? false :\n  encNumber(buf, off, size, date.getTime() / 1000)\n\n// enough to fill the longest string we've got\nconst NULLS = new Array(156).join('\\0')\n// pad with nulls, return true if it's longer or non-ascii\nconst encString = (buf, off, size, string) =>\n  string === null ? false :\n  (buf.write(string + NULLS, off, size, 'utf8'),\n  string.length !== Buffer.byteLength(string) || string.length > size)\n\nmodule.exports = Header\n"]},"metadata":{},"sourceType":"script"}