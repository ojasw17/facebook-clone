{"ast":null,"code":"'use strict';\n\nconst npg = require('..');\n\nconst versioning = require('../lib/util/versioning.js');\n\nconst napi = require('../lib/util/napi.js');\n\nconst existsSync = require('fs').existsSync || require('path').existsSync;\n\nconst path = require('path');\n\nmodule.exports = exports;\nexports.usage = 'Finds the require path for the node-pre-gyp installed module';\n\nexports.validate = function (package_json, opts) {\n  versioning.validate_config(package_json, opts);\n};\n\nexports.find = function (package_json_path, opts) {\n  if (!existsSync(package_json_path)) {\n    throw new Error(package_json_path + 'does not exist');\n  }\n\n  const prog = new npg.Run({\n    package_json_path,\n    argv: process.argv\n  });\n  prog.setBinaryHostProperty();\n  const package_json = prog.package_json;\n  versioning.validate_config(package_json, opts);\n  let napi_build_version;\n\n  if (napi.get_napi_build_versions(package_json, opts)) {\n    napi_build_version = napi.get_best_napi_build_version(package_json, opts);\n  }\n\n  opts = opts || {};\n  if (!opts.module_root) opts.module_root = path.dirname(package_json_path);\n  const meta = versioning.evaluate(package_json, opts, napi_build_version);\n  return meta.module;\n};","map":{"version":3,"sources":["C:/Users/ojaswi/Social - Media web app/frontend-react-app/node_modules/@mapbox/node-pre-gyp/lib/pre-binding.js"],"names":["npg","require","versioning","napi","existsSync","path","module","exports","usage","validate","package_json","opts","validate_config","find","package_json_path","Error","prog","Run","argv","process","setBinaryHostProperty","napi_build_version","get_napi_build_versions","get_best_napi_build_version","module_root","dirname","meta","evaluate"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,IAAD,CAAnB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,2BAAD,CAA1B;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,qBAAD,CAApB;;AACA,MAAMG,UAAU,GAAGH,OAAO,CAAC,IAAD,CAAP,CAAcG,UAAd,IAA4BH,OAAO,CAAC,MAAD,CAAP,CAAgBG,UAA/D;;AACA,MAAMC,IAAI,GAAGJ,OAAO,CAAC,MAAD,CAApB;;AAEAK,MAAM,CAACC,OAAP,GAAiBA,OAAjB;AAEAA,OAAO,CAACC,KAAR,GAAgB,8DAAhB;;AAEAD,OAAO,CAACE,QAAR,GAAmB,UAASC,YAAT,EAAuBC,IAAvB,EAA6B;AAC9CT,EAAAA,UAAU,CAACU,eAAX,CAA2BF,YAA3B,EAAyCC,IAAzC;AACD,CAFD;;AAIAJ,OAAO,CAACM,IAAR,GAAe,UAASC,iBAAT,EAA4BH,IAA5B,EAAkC;AAC/C,MAAI,CAACP,UAAU,CAACU,iBAAD,CAAf,EAAoC;AAClC,UAAM,IAAIC,KAAJ,CAAUD,iBAAiB,GAAG,gBAA9B,CAAN;AACD;;AACD,QAAME,IAAI,GAAG,IAAIhB,GAAG,CAACiB,GAAR,CAAY;AAAEH,IAAAA,iBAAF;AAAqBI,IAAAA,IAAI,EAAEC,OAAO,CAACD;AAAnC,GAAZ,CAAb;AACAF,EAAAA,IAAI,CAACI,qBAAL;AACA,QAAMV,YAAY,GAAGM,IAAI,CAACN,YAA1B;AAEAR,EAAAA,UAAU,CAACU,eAAX,CAA2BF,YAA3B,EAAyCC,IAAzC;AACA,MAAIU,kBAAJ;;AACA,MAAIlB,IAAI,CAACmB,uBAAL,CAA6BZ,YAA7B,EAA2CC,IAA3C,CAAJ,EAAsD;AACpDU,IAAAA,kBAAkB,GAAGlB,IAAI,CAACoB,2BAAL,CAAiCb,YAAjC,EAA+CC,IAA/C,CAArB;AACD;;AACDA,EAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACA,MAAI,CAACA,IAAI,CAACa,WAAV,EAAuBb,IAAI,CAACa,WAAL,GAAmBnB,IAAI,CAACoB,OAAL,CAAaX,iBAAb,CAAnB;AACvB,QAAMY,IAAI,GAAGxB,UAAU,CAACyB,QAAX,CAAoBjB,YAApB,EAAkCC,IAAlC,EAAwCU,kBAAxC,CAAb;AACA,SAAOK,IAAI,CAACpB,MAAZ;AACD,CAjBD","sourcesContent":["'use strict';\n\nconst npg = require('..');\nconst versioning = require('../lib/util/versioning.js');\nconst napi = require('../lib/util/napi.js');\nconst existsSync = require('fs').existsSync || require('path').existsSync;\nconst path = require('path');\n\nmodule.exports = exports;\n\nexports.usage = 'Finds the require path for the node-pre-gyp installed module';\n\nexports.validate = function(package_json, opts) {\n  versioning.validate_config(package_json, opts);\n};\n\nexports.find = function(package_json_path, opts) {\n  if (!existsSync(package_json_path)) {\n    throw new Error(package_json_path + 'does not exist');\n  }\n  const prog = new npg.Run({ package_json_path, argv: process.argv });\n  prog.setBinaryHostProperty();\n  const package_json = prog.package_json;\n\n  versioning.validate_config(package_json, opts);\n  let napi_build_version;\n  if (napi.get_napi_build_versions(package_json, opts)) {\n    napi_build_version = napi.get_best_napi_build_version(package_json, opts);\n  }\n  opts = opts || {};\n  if (!opts.module_root) opts.module_root = path.dirname(package_json_path);\n  const meta = versioning.evaluate(package_json, opts, napi_build_version);\n  return meta.module;\n};\n"]},"metadata":{},"sourceType":"script"}